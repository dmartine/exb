"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
var get_portal_url_1 = require("../util/get-portal-url");
var helpers_1 = require("./helpers");
/**
 * ```js
 * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';
 * //
 * shareItemWithGroup({
 *   id: "abc123",
 *   groupId: "xyz987",
 *   authentication
 * })
 * ```
 * Share an item with a group, either as an
 * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm),
 * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or
 * organization admin.
 *
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function shareItemWithGroup(requestOptions) {
    return changeGroupSharing(tslib_1.__assign({ action: "share" }, requestOptions));
}
exports.shareItemWithGroup = shareItemWithGroup;
/**
 * Stop sharing an item with a group, either as an
 * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-item-owner-.htm),
 * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-group-admin-.htm) or
 * organization admin.
 *
 * ```js
 * import { unshareItemWithGroup } from '@esri/arcgis-rest-portal';
 *
 * unshareItemWithGroup({
 *   id: "abc123",
 *   groupId: "xyz987",
 *   authentication: session
 * })
 * ```
 *
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function unshareItemWithGroup(requestOptions) {
    return changeGroupSharing(tslib_1.__assign({ action: "unshare" }, requestOptions));
}
exports.unshareItemWithGroup = unshareItemWithGroup;
/**
 * @param requestOptions - Options for the request.
 * @returns A Promise that will resolve with the data from the response.
 */
function changeGroupSharing(requestOptions) {
    var username = requestOptions.authentication.username;
    var owner = requestOptions.owner || username;
    return helpers_1.isOrgAdmin(requestOptions).then(function (admin) {
        var resultProp = requestOptions.action === "share" ? "notSharedWith" : "notUnsharedFrom";
        // check if the item has already been shared with the group...
        return isItemSharedWithGroup(requestOptions).then(function (result) {
            // if we are sharing and result is true OR we are unsharing and result is false... short circuit
            if ((requestOptions.action === "share" && result === true) ||
                (requestOptions.action === "unshare" && result === false)) {
                // and send back the same response ArcGIS Online would
                var response = {
                    itemId: requestOptions.id,
                    shortcut: true
                };
                response[resultProp] = [];
                return response;
            }
            else {
                // next check to ensure the user is a member of the group
                return helpers_1.getUserMembership(requestOptions)
                    .then(function (membership) {
                    if (membership === "nonmember") {
                        // abort and reject promise
                        throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are not a member of the specified group " + requestOptions.groupId + ".");
                    }
                    else {
                        // if owner (and member of group) share using the owner url
                        if (owner === username) {
                            return get_portal_url_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/" + requestOptions.action;
                        }
                        else {
                            // if org admin, group admin/owner, use the bare item url
                            if (membership === "admin" || membership === "owner" || admin) {
                                return get_portal_url_1.getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/" + requestOptions.action;
                            }
                            else {
                                // otherwise abort
                                throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are neither the owner, a groupAdmin of " + requestOptions.groupId + ", nor an org_admin.");
                            }
                        }
                    }
                })
                    .then(function (url) {
                    // now its finally time to do the sharing
                    requestOptions.params = {
                        groups: requestOptions.groupId,
                        confirmItemControl: requestOptions.confirmItemControl
                    };
                    // dont mixin to ensure that old query parameters from the search request arent included
                    return arcgis_rest_request_1.request(url, requestOptions);
                })
                    .then(function (sharingResponse) {
                    if (sharingResponse[resultProp].length) {
                        throw Error("Item " + requestOptions.id + " could not be " + requestOptions.action + "d to group " + requestOptions.groupId + ".");
                    }
                    else {
                        // all is well
                        return sharingResponse;
                    }
                });
            } // else
        }); // then
    });
}
/**
 * Find out whether or not an item is already shared with a group.
 *
 * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.
 * @returns A Promise that will resolve with the data from the response.
 */
function isItemSharedWithGroup(requestOptions) {
    var query = {
        q: "id: " + requestOptions.id + " AND group: " + requestOptions.groupId,
        start: 1,
        num: 10,
        sortField: "title"
    };
    // we need to append some params into requestOptions, so make a clone
    // instead of mutating the params on the inbound requestOptions object
    var options = tslib_1.__assign({}, requestOptions, { rawResponse: false });
    // instead of calling out to "@esri/arcgis-rest-items, make the request manually to forgoe another dependency
    options.params = tslib_1.__assign({}, query, requestOptions.params);
    var url = get_portal_url_1.getPortalUrl(options) + "/search";
    // to do: just call searchItems now that its in the same package
    return arcgis_rest_request_1.request(url, options).then(function (searchResponse) {
        // if there are no search results at all, we know the item hasnt already been shared with the group
        if (searchResponse.total === 0) {
            return false;
        }
        else {
            var sharedItem_1;
            // otherwise loop through and search for the id
            searchResponse.results.some(function (item) {
                var matchedItem = item.id === requestOptions.id;
                if (matchedItem) {
                    sharedItem_1 = item;
                }
                return matchedItem;
            });
            if (sharedItem_1) {
                return true;
            }
            else {
                return false;
            }
        }
    });
}
//# sourceMappingURL=group-sharing.js.map
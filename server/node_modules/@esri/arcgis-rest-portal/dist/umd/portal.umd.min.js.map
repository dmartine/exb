{"version":3,"file":"portal.umd.min.js","sources":["../../src/util/get-portal-url.ts","../../src/items/helpers.ts","../../src/items/update.ts","../../src/items/create.ts","../../src/util/SearchQueryBuilder.ts","../../src/util/generic-search.ts","../../src/groups/add-users.ts","../../src/util/array.ts","../../src/groups/get.ts","../../src/sharing/helpers.ts","../../src/sharing/access.ts","../../src/sharing/group-sharing.ts","../../src/util/get-portal.ts","../../src/users/invitation.ts","../../src/items/add.ts","../../src/groups/create.ts","../../src/groups/notification.ts","../../src/items/get.ts","../../src/users/get-user.ts","../../src/users/notification.ts","../../src/users/get-user-url.ts","../../src/groups/join.ts","../../src/groups/protect.ts","../../src/items/protect.ts","../../src/items/remove.ts","../../src/groups/remove.ts","../../src/groups/search.ts","../../src/items/search.ts","../../src/groups/update.ts","../../src/users/update.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions, cleanUrl } from \"@esri/arcgis-rest-request\";\n\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither are present, `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions: IRequestOptions = {}): string {\n  // use portal in options if specified\n  if (requestOptions.portal) {\n    return cleanUrl(requestOptions.portal);\n  }\n\n  // if auth was passed, use that portal\n  if (requestOptions.authentication) {\n    // the portal url is already scrubbed in the auth package\n    return requestOptions.authentication.portal;\n  }\n\n  // default to arcgis.com\n  return \"https://www.arcgis.com/sharing/rest\";\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItemAdd, IItemUpdate, IItem } from \"@esri/arcgis-rest-types\";\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\n/**\n * Base options interface for making authenticated requests for items.\n */\nexport interface IUserItemOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport interface IFolderIdOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the folder.\n   */\n  folderId: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport type ItemRelationshipType =\n  | \"Map2Service\"\n  | \"WMA2Code\"\n  | \"Map2FeatureCollection\"\n  | \"MobileApp2Code\"\n  | \"Service2Data\"\n  | \"Service2Service\"\n  | \"Map2AppConfig\"\n  | \"Item2Attachment\"\n  | \"Item2Report\"\n  | \"Listed2Provisioned\"\n  | \"Style2Style\"\n  | \"Service2Style\"\n  | \"Survey2Service\"\n  | \"Survey2Data\"\n  | \"Service2Route\"\n  | \"Area2Package\"\n  | \"Map2Area\"\n  | \"Service2Layer\"\n  | \"Area2CustomPackage\";\n\nexport interface IItemRelationshipOptions extends IRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n  /**\n   * The type of relationship between the two items.\n   */\n  relationshipType: ItemRelationshipType | ItemRelationshipType[];\n  /**\n   * The direction of the relationship. Either forward (from origin -> destination) or reverse (from destination -> origin).\n   */\n  direction?: \"forward\" | \"reverse\";\n}\n\nexport interface IManageItemRelationshipOptions extends IUserRequestOptions {\n  originItemId: string;\n  destinationItemId: string;\n  relationshipType: ItemRelationshipType;\n}\n\nexport interface IItemResourceOptions extends IUserItemOptions {\n  /**\n   * New resource filename.\n   */\n  name?: string;\n  /**\n   * Text input to be added as a file resource.\n   */\n  content?: string;\n  /**\n   * Controls whether access to the file resource is restricted to the owner or inherited from the sharing permissions set for the associated item.\n   */\n  private?: boolean;\n  /**\n   * Object to store\n   */\n  resource?: any;\n}\n\nexport interface ICreateUpdateItemOptions extends IUserRequestOptions {\n  /**\n   * The owner of the item. If this property is not present, `item.owner` will be passed, or lastly `authentication.username`.\n   */\n  owner?: string;\n  /**\n   * Id of the folder to house the item.\n   */\n  folderId?: string;\n}\n\nexport interface IItemDataOptions extends IRequestOptions {\n  /**\n   * Used to request binary data.\n   */\n  file?: boolean;\n}\n\nexport interface IUpdateItemResponse {\n  success: boolean;\n  id: string;\n}\n\nexport interface IItemResourceResponse {\n  success: boolean;\n  itemId: string;\n  owner: string;\n  folder: string;\n}\n\nexport interface IAddFolderResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Information about created folder: its alphanumeric id, name, and owner's name.\n   */\n  folder: {\n    id: string;\n    title: string;\n    username: string;\n  };\n}\n\nexport interface IMoveItemResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Alphanumeric id of moved item.\n   */\n  itemId: string;\n  /**\n   * Name of owner of item.\n   */\n  owner: string;\n  /**\n   * Alphanumeric id of folder now housing item.\n   */\n  folder: string;\n}\n\n/**\n * Serialize an item and its data into a json format accepted by the Portal API for create and update operations\n *\n * @param item Item to be serialized\n * @returns a formatted json object to be sent to Portal\n */\nexport function serializeItem(item: IItemAdd | IItemUpdate | IItem): any {\n  // create a clone so we're not messing with the original\n  const clone = JSON.parse(JSON.stringify(item));\n\n  // binary data needs POSTed as a `file`\n  // JSON object literals should be passed as `text`.\n  if (clone.data) {\n    (typeof Blob !== \"undefined\" && item.data instanceof Blob) ||\n    // Node.js doesn't implement Blob\n    item.data.constructor.name === \"ReadStream\"\n      ? (clone.file = item.data)\n      : (clone.text = item.data);\n    delete clone.data;\n  }\n  return clone;\n}\n\n/**\n * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.\n */\nexport function determineOwner(requestOptions: any): string {\n  if (requestOptions.owner) {\n    return requestOptions.owner;\n  }\n  if (requestOptions.item && requestOptions.item.owner) {\n    return requestOptions.item.owner;\n  } else {\n    return requestOptions.authentication.username;\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItemUpdate } from \"@esri/arcgis-rest-types\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport {\n  ICreateUpdateItemOptions,\n  IMoveItemResponse,\n  IItemResourceOptions,\n  IItemResourceResponse,\n  IUpdateItemResponse,\n  serializeItem,\n  determineOwner\n} from \"./helpers\";\n\nexport interface IUpdateItemOptions extends ICreateUpdateItemOptions {\n  item: IItemUpdate;\n}\n\nexport interface IMoveItemOptions extends ICreateUpdateItemOptions {\n  /**\n   * Alphanumeric id of item to be moved.\n   */\n  itemId: string;\n  /**\n   * Alphanumeric id of folder to house moved item. If null, empty, or \"/\", the destination is the\n   * root folder.\n   */\n  folderId?: string;\n}\n\n/**\n * ```js\n * import { updateItem } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItem({\n *   item: {\n *     id: \"3ef\",\n *     description: \"A three hour tour\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param item - The item to update.\n * @param requestOptions - Options for the request.\n * @returns A Promise that updates an item.\n */\nexport function updateItem(\n  requestOptions: IUpdateItemOptions\n): Promise<IUpdateItemResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.item.id\n  }/update`;\n\n  // serialize the item into something Portal will accept\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...serializeItem(requestOptions.item)\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { updateItemResource } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item resource.\n */\nexport function updateItemResource(\n  requestOptions: IItemResourceOptions\n): Promise<IItemResourceResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions as IRequestOptions\n  )}/content/users/${owner}/items/${requestOptions.id}/updateResources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    file: requestOptions.resource,\n    fileName: requestOptions.name,\n    text: requestOptions.content,\n    ...requestOptions.params\n  };\n\n  // only override the access specified previously if 'private' is passed explicitly\n  if (typeof requestOptions.private !== \"undefined\") {\n    requestOptions.params.access = requestOptions.private\n      ? \"private\"\n      : \"inherit\";\n  }\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { moveItem } from \"@esri/arcgis-rest-portal\";\n * //\n * moveItem({\n *   itemId: \"3ef\",\n *   folderId: \"7c5\",\n *   authentication: userSession\n * })\n * ```\n * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with owner and folder details once the move has been completed\n */\nexport function moveItem(\n  requestOptions: IMoveItemOptions\n): Promise<IMoveItemResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.itemId\n  }/move`;\n\n  let folderId = requestOptions.folderId;\n  if (!folderId) {\n    folderId = \"/\";\n  }\n  requestOptions.params = {\n    folder: folderId,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IItemAdd } from \"@esri/arcgis-rest-types\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport {\n  IAddFolderResponse,\n  IUpdateItemResponse,\n  ICreateUpdateItemOptions,\n  serializeItem,\n  determineOwner\n} from \"./helpers\";\n\nexport interface ICreateFolderOptions extends ICreateUpdateItemOptions {\n  /**\n   * Name of the folder to create.\n   */\n  title: string;\n}\n\nexport interface ICreateItemOptions extends ICreateUpdateItemOptions {\n  item: IItemAdd;\n}\n\nexport interface ICreateItemResponse extends IUpdateItemResponse {\n  folder: string;\n}\n\n/**\n * ```js\n * import { createFolder } from \"@esri/arcgis-rest-portal\";\n * //\n * createFolder({\n *   title: 'Map Collection',\n *   authentication: userSession\n * })\n *   .then(response)\n * ```\n * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with folder details once the folder has been created\n */\nexport function createFolder(\n  requestOptions: ICreateFolderOptions\n): Promise<IAddFolderResponse> {\n  const owner = determineOwner(requestOptions);\n\n  const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n  const url = `${baseUrl}/createFolder`;\n\n  requestOptions.params = {\n    title: requestOptions.title,\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { createItemInFolder } from \"@esri/arcgis-rest-portal\";\n * //\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\",\n *     data: {}\n *   },\n *   folderId: 'fe8',\n *   authentication\n * })\n * ```\n * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions = Options for the request\n */\nexport function createItemInFolder(\n  requestOptions: ICreateItemOptions\n): Promise<ICreateItemResponse> {\n  const owner = determineOwner(requestOptions);\n\n  const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n  let url = `${baseUrl}/addItem`;\n\n  if (requestOptions.folderId) {\n    url = `${baseUrl}/${requestOptions.folderId}/addItem`;\n  }\n\n  // serialize the item into something Portal will accept\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...serializeItem(requestOptions.item)\n  };\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { createItem } from \"@esri/arcgis-rest-portal\";\n * //\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\",\n *     data: {}\n *   },\n *   authentication\n * })\n * ```\n * Create an Item in the user's root folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that creates an item.\n */\nexport function createItem(\n  requestOptions: ICreateItemOptions\n): Promise<ICreateItemResponse> {\n  // delegate to createItemInFolder placing in the root of the filestore\n  const options = {\n    folderId: null,\n    ...requestOptions\n  } as ICreateItemOptions;\n  return createItemInFolder(options);\n}\n","import { IParamBuilder, warn } from \"@esri/arcgis-rest-request\";\n/**\n * `SearchQueryBuilder` can be used to construct the `q` param for [`searchItems`](/arcgis-rest-js/api/portal/searchItems#searchItems-search) or [`searchGroups`](/arcgis-rest-js/api/portal/searchGroups#searchGroups-search). By chaining methods, it helps build complex search queries.\n *\n * ```js\n * const query = new SearchQueryBuilder()\n *  .match(\"Patrick\")\n *  .in(\"owner\")\n *  .and()\n *  .startGroup()\n *    .match(\"Web Mapping Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Mobile Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Application\")\n *    .in(\"type\")\n *  .endGroup()\n *  .and()\n *  .match(\"Demo App\");\n *\n * searchItems(query).then((results) => {\n *   console.log(request);\n * });\n * ```\n *\n * Will search for items matching\n * ```\n * \"owner: Patrick AND (type:\"Web Mapping Application\" OR type:\"Mobile Application\" OR type:Application) AND Demo App\"\n * ```\n */\nexport class SearchQueryBuilder implements IParamBuilder {\n  private termStack: any[] = [];\n  private rangeStack: any[] = [];\n  private q: string;\n  private openGroups = 0;\n  private currentModifer: string;\n\n  /**\n   * @param q An existing query string to start building from.\n   */\n  constructor(q: string = \"\") {\n    this.q = q;\n  }\n\n  /**\n   * Defines strings to search for.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .match(\"My Layer\")\n   * ```\n   *\n   * @param terms strings to search for.\n   */\n  public match(this: SearchQueryBuilder, ...terms: string[]) {\n    this.termStack = this.termStack.concat(terms);\n    return this;\n  }\n\n  /**\n   * Defines fields to search in. You can pass `\"*\"` or call this method without arguments to search a default set of fields\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .match(\"My Layer\")\n   *   .in(\"title\")\n   * ```\n   *\n   * @param field The field to search for the previous match in.\n   */\n  public in(this: SearchQueryBuilder, field?: string) {\n    const fn = `\\`in(${field ? `\"${field}\"` : \"\"})\\``;\n\n    if (!this.hasRange && !this.hasTerms) {\n      warn(\n        // prettier-ignore\n        `${fn} was called with no call to \\`match(...)\\` or \\`from(...)\\`/\\`to(...)\\`. Your query was not modified.`\n      );\n      return this;\n    }\n\n    if (field && field !== \"*\") {\n      this.q += `${field}:`;\n    }\n\n    return this.commit();\n  }\n\n  /**\n   * Starts a new search group.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .startGroup()\n   *     .match(\"Lakes\")\n   *     .in(\"title\")\n   *   .endGroup()\n   *   .or()\n   *   .startGroup()\n   *     .match(\"Rivers\")\n   *     .in(\"title\")\n   *   .endGroup()\n   * ```\n   */\n  public startGroup(this: SearchQueryBuilder) {\n    this.commit();\n    if (this.openGroups > 0) {\n      this.q += \" \";\n    }\n    this.openGroups++;\n    this.q += \"(\";\n    return this;\n  }\n\n  /**\n   * Ends a search group.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .startGroup()\n   *     .match(\"Lakes\")\n   *     .in(\"title\")\n   *   .endGroup()\n   *   .or()\n   *   .startGroup()\n   *     .match(\"Rivers\")\n   *     .in(\"title\")\n   *   .endGroup()\n   * ```\n   */\n  public endGroup(this: SearchQueryBuilder) {\n    if (this.openGroups <= 0) {\n      warn(\n        `\\`endGroup(...)\\` was called without calling \\`startGroup(...)\\` first. Your query was not modified.`\n      );\n      return this;\n    }\n    this.commit();\n    this.openGroups--;\n    this.q += \")\";\n    return this;\n  }\n\n  /**\n   * Joins two sets of queries with an `AND` clause.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .match(\"Lakes\")\n   *   .in(\"title\")\n   *   .and()\n   *   .match(\"Rivers\")\n   *   .in(\"title\")\n   * ```\n   */\n  public and(this: SearchQueryBuilder) {\n    return this.addModifier(\"and\");\n  }\n\n  /**\n   * Joins two sets of queries with an `OR` clause.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .match(\"Lakes\")\n   *   .in(\"title\")\n   *   .or()\n   *   .match(\"Rivers\")\n   *   .in(\"title\")\n   * ```\n   */\n  public or(this: SearchQueryBuilder) {\n    return this.addModifier(\"or\");\n  }\n\n  /**\n   * Joins two sets of queries with a `NOT` clause. Another option for filtering results is the [prohibit operator '-'](https://developers.arcgis.com/rest/users-groups-and-items/search-reference.htm#ESRI_SECTION1_5C6C35DB9E4A4F4492C5B937BDA2BF67).\n   *\n   * ```js\n   * // omit results with \"Rivers\" in their title\n   * const query = new SearchQueryBuilder()\n   *   .not()\n   *   .match(\"Rivers\")\n   *   .in(\"title\")\n   *\n   * // equivalent\n   * const query = new SearchQueryBuilder()\n   *   .match(\"Rivers\")\n   *   .in(\"-title\")\n   * ```\n   */\n  public not(this: SearchQueryBuilder) {\n    return this.addModifier(\"not\");\n  }\n\n  /**\n   * Begins a new range query.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .from(yesterdaysDate)\n   *   .to(todaysDate)\n   *   .in(\"created\")\n   * ```\n   */\n  public from(this: SearchQueryBuilder, term: number | string | Date) {\n    if (this.hasTerms) {\n      warn(\n        // prettier-ignore\n        `\\`from(...)\\` is not allowed after \\`match(...)\\` try using \\`.from(...).to(...).in(...)\\`. Your query was not modified.`\n      );\n      return this;\n    }\n    this.rangeStack[0] = term;\n    return this;\n  }\n\n  /**\n   * Ends a range query.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .from(yesterdaysDate)\n   *   .to(todaysDate)\n   *   .in(\"created\")\n   * ```\n   */\n  public to(this: SearchQueryBuilder, term: any) {\n    if (this.hasTerms) {\n      warn(\n        // prettier-ignore\n        `\\`to(...)\\` is not allowed after \\`match(...)\\` try using \\`.from(...).to(...).in(...)\\`. Your query was not modified.`\n      );\n      return this;\n    }\n    this.rangeStack[1] = term;\n    return this;\n  }\n\n  /**\n   * Boosts the previous term to increase its rank in the results.\n   *\n   * ```js\n   * const query = new SearchQueryBuilder()\n   *   .match(\"Lakes\")\n   *   .in(\"title\")\n   *   .or()\n   *   .match(\"Rivers\")\n   *   .in(\"title\")\n   *   .boost(3)\n   * ```\n   */\n  public boost(this: SearchQueryBuilder, num: number) {\n    this.commit();\n    this.q += `^${num}`;\n    return this;\n  }\n\n  /**\n   * Returns the current query string. Called internally when the request is made.\n   */\n  public toParam() {\n    this.commit();\n    this.cleanup();\n    return this.q;\n  }\n\n  /**\n   * Returns a new instance of `SearchQueryBuilder` based on the current instance.\n   */\n  public clone() {\n    this.commit();\n    this.cleanup();\n    return new SearchQueryBuilder(this.q + \"\");\n  }\n\n  private addModifier(modifier: string) {\n    if (this.currentModifer) {\n      warn(\n        // prettier-ignore\n        `You have called \\`${this.currentModifer}()\\` after \\`${modifier}()\\`. Your current query was not modified.`\n      );\n      return this;\n    }\n\n    this.commit();\n\n    if (this.q === \"\" && modifier !== \"not\") {\n      warn(\n        `You have called \\`${modifier}()\\` without calling another method to modify your query first. Try calling \\`match()\\` first.`\n      );\n      return this;\n    }\n\n    this.currentModifer = modifier;\n    this.q += this.q === \"\" ? \"\" : \" \";\n    this.q += `${modifier.toUpperCase()} `;\n    return this;\n  }\n\n  private hasWhiteSpace(s: string) {\n    return /\\s/g.test(s);\n  }\n\n  private formatTerm(term: any) {\n    if (term instanceof Date) {\n      return term.getTime();\n    }\n\n    if (typeof term === \"string\" && this.hasWhiteSpace(term)) {\n      return `\"${term}\"`;\n    }\n\n    return term;\n  }\n\n  private commit() {\n    this.currentModifer = undefined;\n    if (this.hasRange) {\n      this.q += `[${this.formatTerm(this.rangeStack[0])} TO ${this.formatTerm(\n        this.rangeStack[1]\n      )}]`;\n      this.rangeStack = [undefined, undefined];\n    }\n\n    if (this.hasTerms) {\n      this.q += this.termStack\n        .map(term => {\n          return this.formatTerm(term);\n        })\n        .join(\" \");\n      this.termStack = [];\n    }\n\n    return this;\n  }\n\n  private get hasTerms() {\n    return this.termStack.length > 0;\n  }\n\n  private get hasRange() {\n    return this.rangeStack.length && this.rangeStack[0] && this.rangeStack[1];\n  }\n\n  private cleanup() {\n    // end a group if we have started one\n    if (this.openGroups > 0) {\n      warn(\n        // prettier-ignore\n        `Automatically closing ${this.openGroups} group(s). You can use \\`endGroup(...)\\` to remove this warning.`\n      );\n\n      while (this.openGroups > 0) {\n        this.q += \")\";\n        this.openGroups--;\n      }\n    }\n\n    const oldQ = this.q;\n    this.q = oldQ.replace(/( AND ?| NOT ?| OR ?)*$/, \"\");\n\n    if (oldQ !== this.q) {\n      warn(\n        `\\`startGroup(...)\\` was called without calling \\`endGroup(...)\\` first. Your query was not modified.`\n      );\n    }\n\n    // clear empty groups\n    this.q = this.q.replace(/(\\(\\))*/, \"\");\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\nimport { IItem, IGroup } from \"@esri/arcgis-rest-types\";\n\nimport { SearchQueryBuilder } from \"./SearchQueryBuilder\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { ISearchOptions, ISearchResult } from \"../util/search\";\n\nexport function genericSearch<T extends IItem | IGroup>(\n  search: string | ISearchOptions | SearchQueryBuilder,\n  searchType: \"item\" | \"group\"\n): Promise<ISearchResult<T>> {\n  let url: string;\n  let options: IRequestOptions;\n  if (typeof search === \"string\" || search instanceof SearchQueryBuilder) {\n    options = {\n      httpMethod: \"GET\",\n      params: {\n        q: search\n      }\n    };\n  } else {\n    options = appendCustomParams<ISearchOptions>(\n      search,\n      [\"q\", \"num\", \"start\", \"sortField\", \"sortOrder\"],\n      {\n        httpMethod: \"GET\"\n      }\n    );\n  }\n\n  url =\n    getPortalUrl(options) +\n    (searchType === \"item\" ? \"/search\" : \"/community/groups\");\n\n  // send the request\n  return request(url, options).then(r => {\n    if (r.nextStart && r.nextStart !== -1) {\n      r.nextPage = function() {\n        let newOptions: ISearchOptions;\n\n        if (\n          typeof search === \"string\" ||\n          search instanceof SearchQueryBuilder\n        ) {\n          newOptions = {\n            q: search,\n            start: r.nextStart\n          };\n        } else {\n          newOptions = search;\n          newOptions.start = r.nextStart;\n        }\n\n        return genericSearch<T>(newOptions, searchType);\n      };\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  ArcGISRequestError\n} from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { chunk } from \"../util/array\";\n\nexport interface IAddGroupUsersOptions extends IRequestOptions {\n  /**\n   * Group ID\n   */\n  id: string;\n  /**\n   * An array of usernames to be added to the group as group members\n   */\n  users?: string[];\n  /**\n   * An array of usernames to be added to the group as group admins\n   */\n  admins?: string[];\n}\n\nexport interface IAddGroupUsersResult {\n  /**\n   * An array of usernames that were not added\n   */\n  notAdded?: string[];\n  /**\n   * An array of request errors\n   */\n  errors?: ArcGISRequestError[];\n}\n\n/**\n * ```js\n * import { addGroupUsers } from \"@esri/arcgis-rest-portal\";\n * //\n * addGroupUsers({\n *   id: groupId,\n *   users: [\"username1\", \"username2\"],\n *   admins: [\"username3\"],\n *   authentication\n * })\n * .then(response);\n * ```\n * Add users to a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm) for more information.\n *\n * @param requestOptions  - Options for the request\n * @returns A Promise\n */\nexport function addGroupUsers(\n  requestOptions: IAddGroupUsersOptions\n): Promise<IAddGroupUsersResult> {\n  const id = requestOptions.id;\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${id}/addUsers`;\n  const baseOptions = Object.assign({}, requestOptions, {\n    admins: undefined,\n    users: undefined\n  });\n\n  const batchRequestOptions = [\n    ..._prepareRequests(\"users\", requestOptions.users, baseOptions),\n    ..._prepareRequests(\"admins\", requestOptions.admins, baseOptions)\n  ];\n\n  const promises = batchRequestOptions.map(options =>\n    _sendSafeRequest(url, options)\n  );\n\n  return Promise.all(promises).then(_consolidateRequestResults);\n}\n\nfunction _prepareRequests(\n  type: \"admins\" | \"users\",\n  usernames: string[],\n  baseOptions: IAddGroupUsersOptions\n): IAddGroupUsersOptions[] {\n  if (!usernames || usernames.length < 1) {\n    return [];\n  }\n\n  // the ArcGIS REST API only allows to add no more than 25 users per request,\n  // see https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm\n  const userChunks: string[][] = chunk<string>(usernames, 25);\n\n  return userChunks.map(users =>\n    _generateRequestOptions(type, users, baseOptions)\n  );\n}\n\nfunction _generateRequestOptions(\n  type: \"admins\" | \"users\",\n  usernames: string[],\n  baseOptions: IAddGroupUsersOptions\n) {\n  return Object.assign({}, baseOptions, {\n    [type]: usernames,\n    params: {\n      ...baseOptions.params,\n      [type]: usernames\n    }\n  });\n}\n\n// this request is safe since the request error will be handled\nfunction _sendSafeRequest(\n  url: string,\n  requestOptions: IAddGroupUsersOptions\n): Promise<IAddGroupUsersResult> {\n  return request(url, requestOptions).catch(error => {\n    return {\n      errors: [error]\n    };\n  });\n}\n\nfunction _consolidateRequestResults(\n  results: IAddGroupUsersResult[]\n): IAddGroupUsersResult {\n  const notAdded = results\n    .filter(result => result.notAdded)\n    .reduce((collection, result) => collection.concat(result.notAdded), []);\n\n  const errors = results\n    .filter(result => result.errors)\n    .reduce((collection, result) => collection.concat(result.errors), []);\n\n  const consolidated: IAddGroupUsersResult = { notAdded };\n\n  if (errors.length > 0) {\n    consolidated.errors = errors;\n  }\n\n  return consolidated;\n}\n","/* Copyright (c) 2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport function chunk<T>(array: T[], size: number) {\n  if (array.length === 0) {\n    return [];\n  }\n\n  const chunks = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n\n  return chunks;\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IPagingParams, IGroup, IItem } from \"@esri/arcgis-rest-types\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface IGetGroupContentOptions extends IRequestOptions {\n  paging: IPagingParams;\n}\n\nexport interface IGroupContentResult {\n  total: number;\n  start: number;\n  num: number;\n  nextStart: number;\n  items: IItem[];\n}\n\nexport interface IGroupUsersResult {\n  owner: string;\n  admins: string[];\n  users: string[];\n}\n\n/**\n * ```js\n * import { getGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * getGroup(\"fxb988\") // id\n *   .then(response)\n * ```\n * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns  A Promise that will resolve with the data from the response.\n */\nexport function getGroup(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGroup> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${id}`;\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * Returns the content of a Group. Since the group may contain 1000s of items\n * the requestParams allow for paging.\n * @param id - Group Id\n * @param requestOptions  - Options for the request, including paging parameters.\n * @returns  A Promise that will resolve with the content of the group.\n */\nexport function getGroupContent(\n  id: string,\n  requestOptions?: IGetGroupContentOptions\n): Promise<IGroup> {\n  const url = `${getPortalUrl(requestOptions)}/content/groups/${id}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    params: { start: 1, num: 100 },\n    ...requestOptions\n  } as IGetGroupContentOptions;\n\n  // is this the most concise way to mixin with the defaults above?\n  if (requestOptions && requestOptions.paging) {\n    options.params = { ...requestOptions.paging };\n  }\n\n  return request(url, options);\n}\n\n/**\n * Get the usernames of the admins and members. Does not return actual 'User' objects. Those must be\n * retrieved via separate calls to the User's API.\n * @param id - Group Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with arrays of the group admin usernames and the member usernames\n */\nexport function getGroupUsers(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGroupUsersResult> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${id}/users`;\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IGroup, IUser, GroupMembership } from \"@esri/arcgis-rest-types\";\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { getGroup } from \"../groups/get\";\n\nexport interface ISharingOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier for the item.\n   */\n  id: string;\n  /**\n   * Item owner, if different from the authenticated user.\n   */\n  owner?: string;\n}\n\nexport interface ISharingResponse {\n  notSharedWith?: string[];\n  notUnsharedFrom?: string[];\n  itemId: string;\n}\n\nexport function getSharingUrl(requestOptions: ISharingOptions): string {\n  const username = requestOptions.authentication.username;\n  const owner = requestOptions.owner || username;\n  return `${getPortalUrl(requestOptions)}/content/users/${encodeURIComponent(\n    owner\n  )}/items/${requestOptions.id}/share`;\n}\n\nexport function isItemOwner(requestOptions: ISharingOptions): boolean {\n  const username = requestOptions.authentication.username;\n  const owner = requestOptions.owner || username;\n  return owner === username;\n}\n\n/**\n * Check it the user is a full org_admin\n * @param requestOptions\n * @returns Promise resolving in a boolean indicating if the user is an ArcGIS Organization administrator\n */\nexport function isOrgAdmin(requestOptions: ISharingOptions): Promise<boolean> {\n  const session = requestOptions.authentication;\n\n  return session.getUser(requestOptions).then((user: IUser) => {\n    if (!user || user.role !== \"org_admin\") {\n      return false;\n    } else {\n      return true;\n    }\n  });\n}\n\n/**\n * Get the User Membership for a particular group. Use this if all you have is the groupId.\n * If you have the group object, check the `userMembership.memberType` property instead of calling this method.\n *\n * @param requestOptions\n * @returns A Promise that resolves with \"owner\" | \"admin\" | \"member\" | \"nonmember\"\n */\nexport function getUserMembership(\n  requestOptions: IGroupSharingOptions\n): Promise<GroupMembership> {\n  // fetch the group...\n  return getGroup(requestOptions.groupId, requestOptions)\n    .then((group: IGroup) => {\n      return group.userMembership.memberType;\n    })\n    .catch(() => {\n      return \"nonmember\" as GroupMembership;\n    });\n}\n\nexport interface IGroupSharingOptions extends ISharingOptions {\n  /**\n   * Group identifier\n   */\n  groupId: string;\n  confirmItemControl?: boolean;\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\n\nimport {\n  ISharingOptions,\n  ISharingResponse,\n  isItemOwner,\n  getSharingUrl,\n  isOrgAdmin\n} from \"./helpers\";\n\nexport interface ISetAccessOptions extends ISharingOptions {\n  /**\n   * \"private\" indicates that the item can only be accessed by the user. \"public\" means accessible to anyone. An item shared to the organization has an access level of \"org\".\n   */\n  access: \"private\" | \"org\" | \"public\";\n}\n\n/**\n * ```js\n * import { setItemAccess } from \"@esri/arcgis-rest-portal\";\n * //\n * setItemAccess({\n *   id: \"abc123\",\n *   access: \"public\", // 'org' || 'private'\n *   authentication: session\n * })\n * ```\n * Change who is able to access an item.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function setItemAccess(\n  requestOptions: ISetAccessOptions\n): Promise<ISharingResponse> {\n  const url = getSharingUrl(requestOptions);\n\n  if (isItemOwner(requestOptions)) {\n    // if the user owns the item, proceed\n    return updateItemAccess(url, requestOptions);\n  } else {\n    // otherwise we need to check to see if they are an organization admin\n    return isOrgAdmin(requestOptions).then(admin => {\n      if (admin) {\n        return updateItemAccess(url, requestOptions);\n      } else {\n        // if neither, updating the sharing isnt possible\n        throw Error(\n          `This item can not be shared by ${\n            requestOptions.authentication.username\n          }. They are neither the item owner nor an organization admin.`\n        );\n      }\n    });\n  }\n}\n\nfunction updateItemAccess(\n  url: string,\n  requestOptions: ISetAccessOptions\n): Promise<any> {\n  requestOptions.params = {\n    org: false,\n    everyone: false,\n    ...requestOptions.params\n  };\n\n  // if the user wants to make the item private, it needs to be unshared from any/all groups as well\n  if (requestOptions.access === \"private\") {\n    requestOptions.params.groups = \" \";\n  }\n  if (requestOptions.access === \"org\") {\n    requestOptions.params.org = true;\n  }\n  // if sharing with everyone, share with the entire organization as well.\n  if (requestOptions.access === \"public\") {\n    requestOptions.params.org = true;\n    requestOptions.params.everyone = true;\n  }\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IItem } from \"@esri/arcgis-rest-types\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport {\n  IGroupSharingOptions,\n  ISharingResponse,\n  isOrgAdmin,\n  getUserMembership\n} from \"./helpers\";\n\ninterface IGroupSharingUnsharingOptions extends IGroupSharingOptions {\n  action: \"share\" | \"unshare\";\n}\n\n/**\n * ```js\n * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';\n * //\n * shareItemWithGroup({\n *   id: \"abc123\",\n *   groupId: \"xyz987\",\n *   authentication\n * })\n * ```\n * Share an item with a group, either as an\n * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm),\n * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or\n * organization admin.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function shareItemWithGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<ISharingResponse> {\n  return changeGroupSharing({ action: \"share\", ...requestOptions });\n}\n\n/**\n * Stop sharing an item with a group, either as an\n * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-item-owner-.htm),\n * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-group-admin-.htm) or\n * organization admin.\n *\n * ```js\n * import { unshareItemWithGroup } from '@esri/arcgis-rest-portal';\n *\n * unshareItemWithGroup({\n *   id: \"abc123\",\n *   groupId: \"xyz987\",\n *   authentication: session\n * })\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function unshareItemWithGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<ISharingResponse> {\n  return changeGroupSharing({ action: \"unshare\", ...requestOptions });\n}\n\n/**\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction changeGroupSharing(\n  requestOptions: IGroupSharingUnsharingOptions\n): Promise<ISharingResponse> {\n  const username = requestOptions.authentication.username;\n  const owner = requestOptions.owner || username;\n\n  return isOrgAdmin(requestOptions).then(admin => {\n    const resultProp =\n      requestOptions.action === \"share\" ? \"notSharedWith\" : \"notUnsharedFrom\";\n    // check if the item has already been shared with the group...\n    return isItemSharedWithGroup(requestOptions).then(result => {\n      // if we are sharing and result is true OR we are unsharing and result is false... short circuit\n      if (\n        (requestOptions.action === \"share\" && result === true) ||\n        (requestOptions.action === \"unshare\" && result === false)\n      ) {\n        // and send back the same response ArcGIS Online would\n        const response = {\n          itemId: requestOptions.id,\n          shortcut: true\n        } as ISharingResponse;\n        response[resultProp] = [];\n        return response;\n      } else {\n        // next check to ensure the user is a member of the group\n        return getUserMembership(requestOptions)\n          .then(membership => {\n            if (membership === \"nonmember\") {\n              // abort and reject promise\n              throw Error(\n                `This item can not be ${\n                  requestOptions.action\n                }d by ${username} as they are not a member of the specified group ${\n                  requestOptions.groupId\n                }.`\n              );\n            } else {\n              // if owner (and member of group) share using the owner url\n              if (owner === username) {\n                return `${getPortalUrl(\n                  requestOptions\n                )}/content/users/${owner}/items/${requestOptions.id}/${\n                  requestOptions.action\n                }`;\n              } else {\n                // if org admin, group admin/owner, use the bare item url\n                if (membership === \"admin\" || membership === \"owner\" || admin) {\n                  return `${getPortalUrl(requestOptions)}/content/items/${\n                    requestOptions.id\n                  }/${requestOptions.action}`;\n                } else {\n                  // otherwise abort\n                  throw Error(\n                    `This item can not be ${\n                      requestOptions.action\n                    }d by ${username} as they are neither the owner, a groupAdmin of ${\n                      requestOptions.groupId\n                    }, nor an org_admin.`\n                  );\n                }\n              }\n            }\n          })\n          .then(url => {\n            // now its finally time to do the sharing\n            requestOptions.params = {\n              groups: requestOptions.groupId,\n              confirmItemControl: requestOptions.confirmItemControl\n            };\n            // dont mixin to ensure that old query parameters from the search request arent included\n            return request(url, requestOptions);\n          })\n          .then(sharingResponse => {\n            if (sharingResponse[resultProp].length) {\n              throw Error(\n                `Item ${requestOptions.id} could not be ${\n                  requestOptions.action\n                }d to group ${requestOptions.groupId}.`\n              );\n            } else {\n              // all is well\n              return sharingResponse;\n            }\n          });\n      } // else\n    }); // then\n  });\n}\n\n/**\n * Find out whether or not an item is already shared with a group.\n *\n * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction isItemSharedWithGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<boolean> {\n  const query = {\n    q: `id: ${requestOptions.id} AND group: ${requestOptions.groupId}`,\n    start: 1,\n    num: 10,\n    sortField: \"title\"\n  };\n\n  // we need to append some params into requestOptions, so make a clone\n  // instead of mutating the params on the inbound requestOptions object\n  const options = { ...requestOptions, rawResponse: false };\n  // instead of calling out to \"@esri/arcgis-rest-items, make the request manually to forgoe another dependency\n  options.params = {\n    ...query,\n    ...requestOptions.params\n  };\n\n  const url = `${getPortalUrl(options)}/search`;\n\n  // to do: just call searchItems now that its in the same package\n  return request(url, options).then(searchResponse => {\n    // if there are no search results at all, we know the item hasnt already been shared with the group\n    if (searchResponse.total === 0) {\n      return false;\n    } else {\n      let sharedItem: IItem;\n      // otherwise loop through and search for the id\n      searchResponse.results.some((item: IItem) => {\n        const matchedItem = item.id === requestOptions.id;\n        if (matchedItem) {\n          sharedItem = item;\n        }\n        return matchedItem;\n      });\n\n      if (sharedItem) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"./get-portal-url\";\n\nexport interface IPortal {\n  id: string;\n  isPortal: boolean;\n  name: string;\n  [key: string]: any;\n}\n\n/**\n * Get the portal\n * @param requestOptions\n */\nexport function getSelf(requestOptions?: IRequestOptions): Promise<IPortal> {\n  // just delegate to getPortal w/o an id\n  return getPortal(null, requestOptions);\n}\n\n/**\n * ```js\n * import { getPortal } from \"@esri/arcgis-rest-request\";\n * //\n * getPortal()\n * getPortal(\"fe8\")\n * getPortal(null, { portal: \"https://custom.maps.arcgis.com/sharing/rest/\" })\n * ```\n * Fetch information about the current portal by id. If no id is passed, portals/self will be called\n * @param id\n * @param requestOptions\n */\nexport function getPortal(\n  id?: string,\n  requestOptions?: IRequestOptions\n): Promise<IPortal> {\n  // construct the search url\n  const idOrSelf = id ? id : \"self\";\n  const url = `${getPortalUrl(requestOptions)}/portals/${idOrSelf}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n\n  // send the request\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IGroup } from \"@esri/arcgis-rest-types\";\n\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface IInvitation {\n  id: string;\n  targetType: string;\n  targetId: string;\n  received: number;\n  accepted: boolean;\n  mustApprove: boolean;\n  email: string;\n  role: string;\n  type: string;\n  dateAccepted: number;\n  expiration: number;\n  created: number;\n  username: string;\n  fromUsername: {\n    username: string;\n    fullname?: string;\n  };\n  group?: IGroup;\n  groupId?: string;\n}\n\nexport interface IInvitationResult {\n  userInvitations: IInvitation[];\n}\n\n/**\n * ```js\n * import { getUserInvitations } from '@esri/arcgis-rest-portal';\n * // username is inferred from UserSession\n * getUserInvitations({ authentication })\n *   .then(response) // response.userInvitations.length => 3\n * ```\n * Get all invitations for a user. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitations.htm) for more information.\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the user's invitations\n */\nexport function getUserInvitations(\n  requestOptions: IUserRequestOptions\n): Promise<IInvitationResult> {\n  let options = { httpMethod: \"GET\" } as IUserRequestOptions;\n\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations`;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\nexport interface IGetUserInvitationOptions extends IUserRequestOptions {\n  invitationId: string;\n}\n\n/**\n * ```js\n * import { getUserInvitation } from '@esri/arcgis-rest-portal';\n * // username is inferred from UserSession\n * getUserInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response) // => response.accepted => true\n * ```\n * Get an invitation for a user by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitation.htm) for more information.\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the invitation\n */\nexport function getUserInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<IInvitation> {\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${\n    requestOptions.invitationId\n  }`;\n\n  let options = { httpMethod: \"GET\" } as IGetUserInvitationOptions;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\n/**\n * ```js\n * import { acceptInvitation } from '@esri/arcgis-rest-portal';\n * // username is inferred from UserSession\n * acceptInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Accept an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/accept-invitation.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function acceptInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<{\n  success: boolean;\n  username: string;\n  groupId: string;\n  id: string;\n}> {\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${\n    requestOptions.invitationId\n  }/accept`;\n\n  const options: IGetUserInvitationOptions = { ...requestOptions };\n  return request(url, options);\n}\n\n/**\n * ```js\n * import { declineInvitation } from '@esri/arcgis-rest-portal';\n * // username is inferred from UserSession\n * declineInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Decline an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/decline-invitation.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function declineInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<{\n  success: boolean;\n  username: string;\n  groupId: string;\n  id: string;\n}> {\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${\n    requestOptions.invitationId\n  }/decline`;\n\n  const options: IGetUserInvitationOptions = { ...requestOptions };\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport {\n  IUserItemOptions,\n  IItemResourceOptions,\n  IUpdateItemResponse,\n  IItemResourceResponse,\n  determineOwner,\n  IManageItemRelationshipOptions\n} from \"./helpers\";\nimport { updateItem, IUpdateItemOptions } from \"./update\";\n\nexport interface IAddItemDataOptions extends IUserItemOptions {\n  /**\n   * Object to store\n   */\n  data: any;\n}\n\n/**\n * ```js\n * import { addItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * addItemData({\n *   id: '3ef',\n *   data: file,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Send a file or blob to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with an object reporting\n *        success/failure and echoing the item id.\n */\nexport function addItemData(\n  requestOptions: IAddItemDataOptions\n): Promise<IUpdateItemResponse> {\n  const owner = determineOwner(requestOptions);\n  const options: any = {\n    item: {\n      id: requestOptions.id,\n      data: requestOptions.data\n    },\n    ...requestOptions\n  };\n\n  delete options.id;\n  delete options.data;\n\n  return updateItem(options as IUpdateItemOptions);\n}\n\n/**\n * ```js\n * import { addItemRelationship } from \"@esri/arcgis-rest-portal\";\n * //\n * addItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-relationship.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemRelationship(\n  requestOptions: IManageItemRelationshipOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/content/users/${owner}/addRelationship`;\n\n  const options = appendCustomParams<IManageItemRelationshipOptions>(\n    requestOptions,\n    [\"originItemId\", \"destinationItemId\", \"relationshipType\"],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n\n/**\n * ```js\n * import { addItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Add a file resource\n * addItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n *\n * // Add a text resource\n * addItemResource({\n *   id: '4fg',\n *   content: \"Text content\",\n *   name: 'bigkahuna.txt',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemResource(\n  requestOptions: IItemResourceOptions\n): Promise<IItemResourceResponse> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/addResources`;\n\n  requestOptions.params = {\n    file: requestOptions.resource,\n    fileName: requestOptions.name,\n    text: requestOptions.content,\n    access: requestOptions.private ? \"private\" : \"inherit\",\n    ...requestOptions.params\n  };\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IGroupAdd, IGroup } from \"@esri/arcgis-rest-types\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface ICreateGroupOptions extends IRequestOptions {\n  group: IGroupAdd;\n}\n\n/**\n * ```js\n * import { createGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * createGroup({\n *   group: {\n *     title: \"No Homers\",\n *     access: \"public\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n * Create a new Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-group.htm) for more information.\n *\n * Note: The group name must be unique within the user's organization.\n * @param requestOptions  - Options for the request, including a group object\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function createGroup(\n  requestOptions: ICreateGroupOptions\n): Promise<{ success: boolean; group: IGroup }> {\n  const url = `${getPortalUrl(requestOptions)}/community/createGroup`;\n\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...requestOptions.group\n  };\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IUserGroupOptions } from \"./helpers\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport type NotificationChannelType = \"push\" | \"email\" | \"builtin\";\n\nexport interface ICreateGroupNotificationOptions extends IUserGroupOptions {\n  /**\n   * Subject of the notification. This only applies to email and builtin notifications. For push notifications, subject/title is provided as a part of the message payload.\n   */\n  subject?: string;\n  /**\n   * Message to be sent. For builtin and email notifications this is a string. For push notifications, this will be JSON.\n   */\n  message: string | object;\n  /**\n   * Array of usernames of the users in the group to whom the message should be sent. If not provided, the message will be sent to all users in the group if the user is an admin. Only group admins will be able to send notifications to a list of users. Group users will be able to send notifications to only one user at a time.\n   */\n  users?: string[];\n  /**\n   * The channel through which the notification is to be delivered. Supported values are push, email, or builtin. If push is chosen, a message will be delivered only to those group members that have registered their devices to receive push notifications. If the user has registered more than one device for the app, then message will be sent to all the registered devices. Email will be sent when the email option is chosen. If the builtin option is chosen, a notification will be added to the notifications list that the user can see when logged into the home app.\n   */\n  notificationChannelType?: NotificationChannelType;\n  /**\n   * ClientId of the application through which user receives messages on the mobile device. This only applies to push notifications.\n   */\n  clientId?: string;\n  /**\n   * This only applies to push notifications. When set to true, message will be delivered to the app and it will not show as an alert to the user.\n   */\n  silentNotification?: boolean;\n}\n\n/**\n * ```js\n * import { createGroupNotification } from '@esri/arcgis-rest-portal';\n * // send an email to an entire group\n * createGroupNotification({\n *   authentication: UserSession,\n *   subject: \"hello\",\n *   message: \"world!\",\n *   id: groupId\n * })\n * ```\n * Create a group notification.\n *\n * @param requestOptions - Options for the request\n *\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function createGroupNotification(\n  requestOptions: ICreateGroupNotificationOptions\n): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/createNotification`;\n\n  const options: ICreateGroupNotificationOptions = {\n    params: {\n      subject: requestOptions.subject,\n      message: requestOptions.message,\n      users: requestOptions.users,\n      notificationChannelType:\n        requestOptions.notificationChannelType || \"email\",\n      clientId: requestOptions.clientId,\n      silentNotification: requestOptions.silentNotification,\n      notifyAll: !requestOptions.users || requestOptions.users.length === 0,\n      ...requestOptions.params\n    },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItem, IGroup } from \"@esri/arcgis-rest-types\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { IItemDataOptions, IItemRelationshipOptions } from \"./helpers\";\n\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IItem> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(\n  id: string,\n  requestOptions?: IItemDataOptions\n): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}/data`;\n  // default to a GET request\n  const options: IItemDataOptions = {\n    ...{ httpMethod: \"GET\", params: {} },\n    ...requestOptions\n  };\n\n  if (options.file) {\n    options.params.f = null;\n  }\n\n  return request(url, options).catch(err => {\n    /* if the item doesn't include data, the response will be empty\n       and the internal call to response.json() will fail */\n    const emptyResponseErr = RegExp(\n      /Unexpected end of (JSON input|data at line 1 column 1)/i\n    );\n    /* istanbul ignore else */\n    if (emptyResponseErr.test(err.message)) {\n      return;\n    } else throw err;\n  });\n}\n\nexport interface IGetRelatedItemsResponse {\n  total: number;\n  relatedItems: IItem[];\n}\n\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(\n  requestOptions: IItemRelationshipOptions\n): Promise<IGetRelatedItemsResponse> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${\n    requestOptions.id\n  }/relatedItems`;\n\n  const options: IItemRelationshipOptions = {\n    httpMethod: \"GET\",\n    params: {\n      direction: requestOptions.direction\n    },\n    ...requestOptions\n  };\n\n  if (typeof requestOptions.relationshipType === \"string\") {\n    options.params.relationshipType = requestOptions.relationshipType;\n  } else {\n    options.params.relationshipTypes = requestOptions.relationshipType;\n  }\n\n  delete options.direction;\n  delete options.relationshipType;\n\n  return request(url, options);\n}\n\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}/resources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    ...requestOptions.params,\n    num: 1000\n  };\n\n  return request(url, requestOptions);\n}\n\nexport interface IGetItemGroupsResponse {\n  admin?: IGroup[];\n  member?: IGroup[];\n  other?: IGroup[];\n}\n\n/**\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGetItemGroupsResponse> {\n  const url = `${getPortalUrl(requestOptions)}/content/items/${id}/groups`;\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IUser } from \"@esri/arcgis-rest-types\";\n\nimport { UserSession } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface IGetUserOptions extends IRequestOptions {\n  /**\n   * A session representing a logged in user.\n   */\n  authentication?: UserSession;\n  /**\n   * Supply a username if you'd like to fetch information about a different user than is being used to authenticate the request.\n   */\n  username?: string;\n}\n\n/**\n * ```js\n * import { getUser } from '@esri/arcgis-rest-portal';\n * //\n * getUser(\"jsmith\")\n *   .then(response)\n * // => { firstName: \"John\", lastName: \"Smith\",tags: [\"GIS Analyst\", \"City of Redlands\"] }\n * ```\n * Get information about a user. This method has proven so generically useful that you can also call [`UserSession.getUser()`](/arcgis-rest-js/api/auth/UserSession#getUser-summary).\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with metadata about the user\n */\nexport function getUser(\n  requestOptions?: string | IGetUserOptions\n): Promise<IUser> {\n  let url;\n  let options = { httpMethod: \"GET\" } as IGetUserOptions;\n\n  // if a username is passed, assume ArcGIS Online\n  if (typeof requestOptions === \"string\") {\n    url = `https://www.arcgis.com/sharing/rest/community/users/${requestOptions}`;\n  } else {\n    // if an authenticated session is passed, default to that user/portal unless another username is provided manually\n    const username =\n      requestOptions.username || requestOptions.authentication.username;\n    url = `${getPortalUrl(requestOptions)}/community/users/${encodeURIComponent(\n      username\n    )}`;\n    options = {\n      ...requestOptions,\n      ...options\n    };\n  }\n  // send the request\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface INotification {\n  id: string;\n  type: string;\n  target: string;\n  targetType: string;\n  received: number;\n  data: { [key: string]: any };\n}\n\nexport interface IRemoveNotificationOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n}\nexport interface INotificationResult {\n  notifications: INotification[];\n}\n\n/**\n * ```js\n * import { getUserNotifications } from '@esri/arcgis-rest-portal';\n * // username is inferred from UserSession\n * getUserNotifications({ authentication })\n *   .then(results) // results.notifications.length) => 3\n * ```\n * Get notifications for a user.\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the user's notifications\n */\nexport function getUserNotifications(\n  requestOptions: IUserRequestOptions\n): Promise<INotificationResult> {\n  let options = { httpMethod: \"GET\" } as IUserRequestOptions;\n\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/notifications`;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\n/**\n * Delete a notification.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function removeNotification(\n  requestOptions: IRemoveNotificationOptions\n): Promise<{ success: boolean; notificationId: string }> {\n  const username = encodeURIComponent(requestOptions.authentication.username);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/notifications/${\n    requestOptions.id\n  }/delete`;\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { UserSession } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\n/**\n * Helper that returns the [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm) for a given portal.\n *\n * @param session\n * @returns User url to be used in API requests.\n */\nexport function getUserUrl(session: UserSession): string {\n  return `${getPortalUrl(session)}/community/users/${encodeURIComponent(\n    session.username\n  )}`;\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { IUserGroupOptions } from \"./helpers\";\n\n/**\n * ```js\n * import { joinGroup } from '@esri/arcgis-rest-portal';\n * //\n * joinGroup({\n *   id: groupId,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Make a request as the authenticated user to join a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/join-group.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request and the groupId.\n */\nexport function joinGroup(\n  requestOptions: IUserGroupOptions\n): Promise<{ success: boolean; groupId: string }> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/join`;\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { leaveGroup } from '@esri/arcgis-rest-portal';\n * //\n * leaveGroup({\n *   id: groupId,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Make a request as the authenticated user to leave a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/leave-group.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request and the groupId.\n */\nexport function leaveGroup(\n  requestOptions: IUserGroupOptions\n): Promise<{ success: boolean; groupId: string }> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/leave`;\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { IUserGroupOptions } from \"./helpers\";\n\n/**\n * ```js\n * import { protectGroup } from '@esri/arcgis-rest-portal';\n * //\n * protectGroup({\n *   id: groupId,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Protect a group to avoid accidental deletion. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/protect-group.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function protectGroup(\n  requestOptions: IUserGroupOptions\n): Promise<{ success: boolean }> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/protect`;\n\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { unprotectGroup } from '@esri/arcgis-rest-portal';\n * //\n * unprotectGroup({\n *   id: groupId,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Unprotect a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unprotect-group.htm) for more information.\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function unprotectGroup(\n  requestOptions: IUserGroupOptions\n): Promise<{ success: boolean }> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/unprotect`;\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { IUserItemOptions, determineOwner } from \"./helpers\";\n\n/**\n * Protect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/protect.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to protect an item.\n */\nexport function protectItem(\n  requestOptions: IUserItemOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/protect`;\n  return request(url, requestOptions);\n}\n\n/**\n * Unprotect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unprotect.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to unprotect an item.\n */\nexport function unprotectItem(\n  requestOptions: IUserItemOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/unprotect`;\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport {\n  IUserItemOptions,\n  IItemResourceOptions,\n  IFolderIdOptions,\n  determineOwner,\n  IManageItemRelationshipOptions\n} from \"./helpers\";\n\n/**\n * ```js\n * import { removeItem } from \"@esri/arcgis-rest-portal\";\n * //\n * removeItem({\n *   id: \"3ef\",\n *   authentication\n * })\n * ```\n * Delete an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item.\n */\nexport function removeItem(\n  requestOptions: IUserItemOptions\n): Promise<{ success: boolean; itemId: string }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/delete`;\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { removeItemRelationship } from \"@esri/arcgis-rest-portal\";\n * //\n * removeItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Remove a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-relationship.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function removeItemRelationship(\n  requestOptions: IManageItemRelationshipOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/content/users/${owner}/removeRelationship`;\n\n  const options = appendCustomParams<IManageItemRelationshipOptions>(\n    requestOptions,\n    [\"originItemId\", \"destinationItemId\", \"relationshipType\"],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n\n/**\n * Remove a resource associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item resource.\n */\nexport function removeItemResource(\n  requestOptions: IItemResourceOptions\n): Promise<{ success: boolean }> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n    requestOptions.id\n  }/removeResources`;\n\n  // mix in user supplied params\n  requestOptions.params = {\n    ...requestOptions.params,\n    resource: requestOptions.resource\n  };\n  return request(url, requestOptions);\n}\n\n/**\n * ```js\n * import { removeFolder } from \"@esri/arcgis-rest-portal\";\n * //\n * removeFolder({\n *   folderId: \"fe4\",\n *   owner: \"c@sey\",\n *   authentication\n * })\n *   .then(response)\n *\n * ```\n * Delete a non-root folder and all the items it contains. See the [REST\n * Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-folder.htm) for\n * more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes a folder\n */\nexport function removeFolder(\n  requestOptions: IFolderIdOptions\n): Promise<{\n  success: boolean;\n  folder: {\n    username: string;\n    id: string;\n    title: string;\n  };\n}> {\n  const owner = determineOwner(requestOptions);\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/content/users/${encodeURIComponent(owner)}/${\n    requestOptions.folderId\n  }/delete`;\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { IUserGroupOptions } from \"./helpers\";\n\n/**\n * ```js\n * import { removeGroup } from '@esri/arcgis-rest-portal';\n * //\n * removeGroup({\n *   id: groupId,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Delete a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-group.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function removeGroup(requestOptions: IUserGroupOptions): Promise<any> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.id\n  }/delete`;\n  const options: IUserGroupOptions = {\n    ...requestOptions\n  };\n  return request(url, options);\n}\n","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IGroup } from \"@esri/arcgis-rest-types\";\nimport { SearchQueryBuilder } from \"../util/SearchQueryBuilder\";\nimport { ISearchOptions, ISearchResult } from \"../util/search\";\nimport { genericSearch } from \"../util/generic-search\";\n\n/**\n * ```js\n * import { searchGroups } from \"@esri/arcgis-rest-portal\";\n * //\n * searchGroups('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for groups. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchGroups(\n  search: string | ISearchOptions | SearchQueryBuilder\n): Promise<ISearchResult<IGroup>> {\n  return genericSearch<IGroup>(search, \"group\");\n}\n","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IItem } from \"@esri/arcgis-rest-types\";\nimport { SearchQueryBuilder } from \"../util/SearchQueryBuilder\";\nimport { ISearchOptions, ISearchResult } from \"../util/search\";\nimport { genericSearch } from \"../util/generic-search\";\n\n/**\n * ```js\n * import { searchItems } from \"@esri/arcgis-rest-portal\";\n * //\n * searchItems('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchItems(\n  search: string | ISearchOptions | SearchQueryBuilder\n): Promise<ISearchResult<IItem>> {\n  return genericSearch<IItem>(search, \"item\");\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItemUpdate } from \"@esri/arcgis-rest-types\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface IUpdateGroupOptions extends IRequestOptions {\n  group: IItemUpdate;\n}\n\n/**\n * ```js\n * import { updateGroup } from '@esri/arcgis-rest-portal';\n * //\n * updateGroup({\n *   group: { id: \"fgr344\", title: \"new\" }\n * })\n *   .then(response)\n * ```\n * Update the properties of a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-group.htm) for more information.\n *\n * @param requestOptions - Options for the request, including the group\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport function updateGroup(\n  requestOptions: IUpdateGroupOptions\n): Promise<{ success: boolean; groupId: string }> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${\n    requestOptions.group.id\n  }/update`;\n\n  requestOptions.params = {\n    ...requestOptions.params,\n    ...requestOptions.group\n  };\n\n  return request(url, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { IUser } from \"@esri/arcgis-rest-types\";\n\nimport { IUserRequestOptions } from \"@esri/arcgis-rest-auth\";\n\nimport { getPortalUrl } from \"../util/get-portal-url\";\n\nexport interface IUpdateUserOptions extends IUserRequestOptions {\n  /**\n   * The user properties to be updated.\n   */\n  user: IUser;\n}\n\nexport interface IUpdateUserResponse {\n  success: boolean;\n  username: string;\n}\n\n/**\n * ```js\n * import { updateUser } from '@esri/arcgis-rest-portal';\n * // any user can update their own profile\n * updateUser({\n *   authentication,\n *   user: { description: \"better than the last one\" }\n * })\n *   .then(response)\n * // org administrators must declare the username that will be updated explicitly\n * updateUser({\n *   authentication,\n *   user: { username: \"c@sey\", description: \"\" }\n * })\n *   .then(response)\n * // => { \"success\": true, \"username\": \"c@sey\" }\n * ```\n * Update a user profile. The username will be extracted from the authentication session unless it is provided explicitly. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-user.htm) for more information.\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with metadata about the user\n */\nexport function updateUser(\n  requestOptions?: IUpdateUserOptions\n): Promise<IUpdateUserResponse> {\n  // default to the authenticated username unless another username is provided manually\n  const username =\n    requestOptions.user.username || requestOptions.authentication.username;\n\n  const updateUrl = `${getPortalUrl(\n    requestOptions\n  )}/community/users/${encodeURIComponent(username)}/update`;\n\n  // mixin custom params and the user information, then drop the user info\n  requestOptions.params = {\n    ...requestOptions.user,\n    ...requestOptions.params\n  };\n\n  delete requestOptions.user;\n\n  // send the request\n  return request(updateUrl, requestOptions);\n}\n"],"names":["getPortalUrl","requestOptions","portal","cleanUrl","authentication","serializeItem","item","clone","JSON","parse","stringify","data","Blob","constructor","name","file","text","determineOwner","owner","username","updateItem","url","id","params","request","createItemInFolder","baseUrl","folderId","q","this","SearchQueryBuilder","_i","terms","termStack","concat","field","fn","hasRange","hasTerms","commit","warn","openGroups","addModifier","term","rangeStack","num","cleanup","modifier","currentModifer","toUpperCase","s","test","Date","getTime","hasWhiteSpace","undefined","formatTerm","map","_this","join","Object","length","oldQ","replace","genericSearch","search","searchType","options","httpMethod","appendCustomParams","then","r","nextStart","nextPage","newOptions","start","_prepareRequests","type","usernames","baseOptions","array","size","chunks","i","push","slice","chunk","users","assign","_a","_generateRequestOptions","_consolidateRequestResults","results","notAdded","filter","result","reduce","collection","errors","consolidated","getGroup","getSharingUrl","encodeURIComponent","isItemOwner","isOrgAdmin","getUser","user","role","getUserMembership","groupId","group","userMembership","memberType","catch","updateItemAccess","org","everyone","access","groups","changeGroupSharing","admin","resultProp","action","query","sortField","rawResponse","searchResponse","total","some","matchedItem","sharedItem_1","isItemSharedWithGroup","response","itemId","shortcut","membership","Error","confirmItemControl","sharingResponse","getPortal","idOrSelf","invitationId","admins","promises","error","_sendSafeRequest","Promise","all","resource","fileName","content","private","title","subject","message","notificationChannelType","clientId","silentNotification","notifyAll","tslib_1.__assign","paging","f","err","RegExp","direction","relationshipType","relationshipTypes","session","folder","updateUrl"],"mappings":"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"}
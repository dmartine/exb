/* @preserve
* @esri/arcgis-rest-portal - v2.1.1 - Apache-2.0
* Copyright (c) 2017-2019 Esri, Inc.
* Mon Jul 15 2019 11:50:29 GMT-0700 (PDT)
*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@esri/arcgis-rest-request')) :
    typeof define === 'function' && define.amd ? define(['exports', '@esri/arcgis-rest-request'], factory) :
    (global = global || self, factory(global.arcgisRest = global.arcgisRest || {}, global.arcgisRest));
}(this, function (exports, arcgisRestRequest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given
     * precedence over `authentication.portal`. If neither are present, `www.arcgis.com/sharing/rest` is returned.
     *
     * @param requestOptions - Request options that may have authentication manager
     * @returns Portal url to be used in API requests
     */
    function getPortalUrl(requestOptions) {
        if (requestOptions === void 0) { requestOptions = {}; }
        // use portal in options if specified
        if (requestOptions.portal) {
            return arcgisRestRequest.cleanUrl(requestOptions.portal);
        }
        // if auth was passed, use that portal
        if (requestOptions.authentication) {
            // the portal url is already scrubbed in the auth package
            return requestOptions.authentication.portal;
        }
        // default to arcgis.com
        return "https://www.arcgis.com/sharing/rest";
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Serialize an item and its data into a json format accepted by the Portal API for create and update operations
     *
     * @param item Item to be serialized
     * @returns a formatted json object to be sent to Portal
     */
    function serializeItem(item) {
        // create a clone so we're not messing with the original
        var clone = JSON.parse(JSON.stringify(item));
        // binary data needs POSTed as a `file`
        // JSON object literals should be passed as `text`.
        if (clone.data) {
            (typeof Blob !== "undefined" && item.data instanceof Blob) ||
                // Node.js doesn't implement Blob
                item.data.constructor.name === "ReadStream"
                ? (clone.file = item.data)
                : (clone.text = item.data);
            delete clone.data;
        }
        return clone;
    }
    /**
     * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.
     */
    function determineOwner(requestOptions) {
        if (requestOptions.owner) {
            return requestOptions.owner;
        }
        if (requestOptions.item && requestOptions.item.owner) {
            return requestOptions.item.owner;
        }
        else {
            return requestOptions.authentication.username;
        }
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { updateItem } from "@esri/arcgis-rest-portal";
     * //
     * updateItem({
     *   item: {
     *     id: "3ef",
     *     description: "A three hour tour"
     *   },
     *   authentication
     * })
     *   .then(response)
     * ```
     * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.
     *
     * @param item - The item to update.
     * @param requestOptions - Options for the request.
     * @returns A Promise that updates an item.
     */
    function updateItem(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.item.id + "/update";
        // serialize the item into something Portal will accept
        requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { updateItemResource } from "@esri/arcgis-rest-portal";
     * //
     * updateItemResource({
     *   id: '3ef',
     *   resource: file,
     *   name: 'bigkahuna.jpg',
     *   authentication
     * })
     *   .then(response)
     * ```
     * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that updates an item resource.
     */
    function updateItemResource(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/updateResources";
        // mix in user supplied params
        requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content }, requestOptions.params);
        // only override the access specified previously if 'private' is passed explicitly
        if (typeof requestOptions.private !== "undefined") {
            requestOptions.params.access = requestOptions.private
                ? "private"
                : "inherit";
        }
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { moveItem } from "@esri/arcgis-rest-portal";
     * //
     * moveItem({
     *   itemId: "3ef",
     *   folderId: "7c5",
     *   authentication: userSession
     * })
     * ```
     * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that resolves with owner and folder details once the move has been completed
     */
    function moveItem(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.itemId + "/move";
        var folderId = requestOptions.folderId;
        if (!folderId) {
            folderId = "/";
        }
        requestOptions.params = __assign({ folder: folderId }, requestOptions.params);
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { addItemData } from "@esri/arcgis-rest-portal";
     * //
     * addItemData({
     *   id: '3ef',
     *   data: file,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Send a file or blob to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with an object reporting
     *        success/failure and echoing the item id.
     */
    function addItemData(requestOptions) {
        var owner = determineOwner(requestOptions);
        var options = __assign({ item: {
                id: requestOptions.id,
                data: requestOptions.data
            } }, requestOptions);
        delete options.id;
        delete options.data;
        return updateItem(options);
    }
    /**
     * ```js
     * import { addItemRelationship } from "@esri/arcgis-rest-portal";
     * //
     * addItemRelationship({
     *   originItemId: '3ef',
     *   destinationItemId: 'ae7',
     *   relationshipType: 'Service2Layer',
     *   authentication
     * })
     *   .then(response)
     * ```
     * Add a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-relationship.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to add item resources.
     */
    function addItemRelationship(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/addRelationship";
        var options = arcgisRestRequest.appendCustomParams(requestOptions, ["originItemId", "destinationItemId", "relationshipType"], { params: __assign({}, requestOptions.params) });
        return arcgisRestRequest.request(url, options);
    }
    /**
     * ```js
     * import { addItemResource } from "@esri/arcgis-rest-portal";
     *
     * // Add a file resource
     * addItemResource({
     *   id: '3ef',
     *   resource: file,
     *   name: 'bigkahuna.jpg',
     *   authentication
     * })
     *   .then(response)
     *
     * // Add a text resource
     * addItemResource({
     *   id: '4fg',
     *   content: "Text content",
     *   name: 'bigkahuna.txt',
     *   authentication
     * })
     *   .then(response)
     * ```
     * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to add item resources.
     */
    function addItemResource(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/addResources";
        requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content, access: requestOptions.private ? "private" : "inherit" }, requestOptions.params);
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { createFolder } from "@esri/arcgis-rest-portal";
     * //
     * createFolder({
     *   title: 'Map Collection',
     *   authentication: userSession
     * })
     *   .then(response)
     * ```
     * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that resolves with folder details once the folder has been created
     */
    function createFolder(requestOptions) {
        var owner = determineOwner(requestOptions);
        var baseUrl = getPortalUrl(requestOptions) + "/content/users/" + owner;
        var url = baseUrl + "/createFolder";
        requestOptions.params = __assign({ title: requestOptions.title }, requestOptions.params);
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { createItemInFolder } from "@esri/arcgis-rest-portal";
     * //
     * createItem({
     *   item: {
     *     title: "The Amazing Voyage",
     *     type: "Web Map",
     *     data: {}
     *   },
     *   folderId: 'fe8',
     *   authentication
     * })
     * ```
     * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.
     *
     * @param requestOptions = Options for the request
     */
    function createItemInFolder(requestOptions) {
        var owner = determineOwner(requestOptions);
        var baseUrl = getPortalUrl(requestOptions) + "/content/users/" + owner;
        var url = baseUrl + "/addItem";
        if (requestOptions.folderId) {
            url = baseUrl + "/" + requestOptions.folderId + "/addItem";
        }
        // serialize the item into something Portal will accept
        requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { createItem } from "@esri/arcgis-rest-portal";
     * //
     * createItem({
     *   item: {
     *     title: "The Amazing Voyage",
     *     type: "Web Map",
     *     data: {}
     *   },
     *   authentication
     * })
     * ```
     * Create an Item in the user's root folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that creates an item.
     */
    function createItem(requestOptions) {
        // delegate to createItemInFolder placing in the root of the filestore
        var options = __assign({ folderId: null }, requestOptions);
        return createItemInFolder(options);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```
     * import { getItem } from "@esri/arcgis-rest-portal";
     * //
     * getItem("ae7")
     *   .then(response);
     * // or
     * getItem("ae7", { authentication })
     *   .then(response)
     * ```
     * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.
     *
     * @param id - Item Id
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the data from the response.
     */
    function getItem(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/items/" + id;
        // default to a GET request
        var options = __assign({ httpMethod: "GET" }, requestOptions);
        return arcgisRestRequest.request(url, options);
    }
    /**
     * ```
     * import { getItemData } from "@esri/arcgis-rest-portal";
     * //
     * getItemData("ae7")
     *   .then(response)
     * // or
     * getItemData("ae7", { authentication })
     *   .then(response)
     * ```
     * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.
     * @param id - Item Id
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the json data for the item.
     */
    function getItemData(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/items/" + id + "/data";
        // default to a GET request
        var options = __assign({ httpMethod: "GET", params: {} }, requestOptions);
        if (options.file) {
            options.params.f = null;
        }
        return arcgisRestRequest.request(url, options).catch(function (err) {
            /* if the item doesn't include data, the response will be empty
               and the internal call to response.json() will fail */
            var emptyResponseErr = RegExp(/Unexpected end of (JSON input|data at line 1 column 1)/i);
            /* istanbul ignore else */
            if (emptyResponseErr.test(err.message)) {
                return;
            }
            else
                throw err;
        });
    }
    /**
     * ```
     * import { getRelatedItems } from "@esri/arcgis-rest-portal";
     * //
     * getRelatedItems({
     *   id: "ae7",
     *   relationshipType: "Service2Layer" // or several ["Service2Layer", "Map2Area"]
     * })
     *   .then(response)
     * ```
     * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to get some item resources.
     */
    function getRelatedItems(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/relatedItems";
        var options = __assign({ httpMethod: "GET", params: {
                direction: requestOptions.direction
            } }, requestOptions);
        if (typeof requestOptions.relationshipType === "string") {
            options.params.relationshipType = requestOptions.relationshipType;
        }
        else {
            options.params.relationshipTypes = requestOptions.relationshipType;
        }
        delete options.direction;
        delete options.relationshipType;
        return arcgisRestRequest.request(url, options);
    }
    /**
     * Get the resources associated with an item
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to get some item resources.
     */
    function getItemResources(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/items/" + id + "/resources";
        // mix in user supplied params
        requestOptions.params = __assign({}, requestOptions.params, { num: 1000 });
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { getItemGroups } from "@esri/arcgis-rest-portal";
     * //
     * getItemGroups("30e5fe3149c34df1ba922e6f5bbf808f")
     *   .then(response)
     * ```
     * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.
     *
     * @param id - The Id of the item to query group association for.
     * @param requestOptions - Options for the request
     * @returns A Promise to get some item groups.
     */
    function getItemGroups(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/items/" + id + "/groups";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Protect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/protect.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to protect an item.
     */
    function protectItem(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/protect";
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * Unprotect an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unprotect.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to unprotect an item.
     */
    function unprotectItem(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/unprotect";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { removeItem } from "@esri/arcgis-rest-portal";
     * //
     * removeItem({
     *   id: "3ef",
     *   authentication
     * })
     * ```
     * Delete an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-item.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that deletes an item.
     */
    function removeItem(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/delete";
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { removeItemRelationship } from "@esri/arcgis-rest-portal";
     * //
     * removeItemRelationship({
     *   originItemId: '3ef',
     *   destinationItemId: 'ae7',
     *   relationshipType: 'Service2Layer',
     *   authentication
     * })
     *   .then(response)
     * ```
     * Remove a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-relationship.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise to add item resources.
     */
    function removeItemRelationship(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/removeRelationship";
        var options = arcgisRestRequest.appendCustomParams(requestOptions, ["originItemId", "destinationItemId", "relationshipType"], { params: __assign({}, requestOptions.params) });
        return arcgisRestRequest.request(url, options);
    }
    /**
     * Remove a resource associated with an item
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that deletes an item resource.
     */
    function removeItemResource(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/removeResources";
        // mix in user supplied params
        requestOptions.params = __assign({}, requestOptions.params, { resource: requestOptions.resource });
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { removeFolder } from "@esri/arcgis-rest-portal";
     * //
     * removeFolder({
     *   folderId: "fe4",
     *   owner: "c@sey",
     *   authentication
     * })
     *   .then(response)
     *
     * ```
     * Delete a non-root folder and all the items it contains. See the [REST
     * Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-folder.htm) for
     * more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that deletes a folder
     */
    function removeFolder(requestOptions) {
        var owner = determineOwner(requestOptions);
        var url = getPortalUrl(requestOptions) + "/content/users/" + encodeURIComponent(owner) + "/" + requestOptions.folderId + "/delete";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /**
     * `SearchQueryBuilder` can be used to construct the `q` param for [`searchItems`](/arcgis-rest-js/api/portal/searchItems#searchItems-search) or [`searchGroups`](/arcgis-rest-js/api/portal/searchGroups#searchGroups-search). By chaining methods, it helps build complex search queries.
     *
     * ```js
     * const query = new SearchQueryBuilder()
     *  .match("Patrick")
     *  .in("owner")
     *  .and()
     *  .startGroup()
     *    .match("Web Mapping Application")
     *    .in("type")
     *    .or()
     *    .match("Mobile Application")
     *    .in("type")
     *    .or()
     *    .match("Application")
     *    .in("type")
     *  .endGroup()
     *  .and()
     *  .match("Demo App");
     *
     * searchItems(query).then((results) => {
     *   console.log(request);
     * });
     * ```
     *
     * Will search for items matching
     * ```
     * "owner: Patrick AND (type:"Web Mapping Application" OR type:"Mobile Application" OR type:Application) AND Demo App"
     * ```
     */
    var SearchQueryBuilder = /** @class */ (function () {
        /**
         * @param q An existing query string to start building from.
         */
        function SearchQueryBuilder(q) {
            if (q === void 0) { q = ""; }
            this.termStack = [];
            this.rangeStack = [];
            this.openGroups = 0;
            this.q = q;
        }
        /**
         * Defines strings to search for.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .match("My Layer")
         * ```
         *
         * @param terms strings to search for.
         */
        SearchQueryBuilder.prototype.match = function () {
            var terms = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                terms[_i] = arguments[_i];
            }
            this.termStack = this.termStack.concat(terms);
            return this;
        };
        /**
         * Defines fields to search in. You can pass `"*"` or call this method without arguments to search a default set of fields
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .match("My Layer")
         *   .in("title")
         * ```
         *
         * @param field The field to search for the previous match in.
         */
        SearchQueryBuilder.prototype.in = function (field) {
            var fn = "`in(" + (field ? "\"" + field + "\"" : "") + ")`";
            if (!this.hasRange && !this.hasTerms) {
                arcgisRestRequest.warn(
                // prettier-ignore
                fn + " was called with no call to `match(...)` or `from(...)`/`to(...)`. Your query was not modified.");
                return this;
            }
            if (field && field !== "*") {
                this.q += field + ":";
            }
            return this.commit();
        };
        /**
         * Starts a new search group.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .startGroup()
         *     .match("Lakes")
         *     .in("title")
         *   .endGroup()
         *   .or()
         *   .startGroup()
         *     .match("Rivers")
         *     .in("title")
         *   .endGroup()
         * ```
         */
        SearchQueryBuilder.prototype.startGroup = function () {
            this.commit();
            if (this.openGroups > 0) {
                this.q += " ";
            }
            this.openGroups++;
            this.q += "(";
            return this;
        };
        /**
         * Ends a search group.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .startGroup()
         *     .match("Lakes")
         *     .in("title")
         *   .endGroup()
         *   .or()
         *   .startGroup()
         *     .match("Rivers")
         *     .in("title")
         *   .endGroup()
         * ```
         */
        SearchQueryBuilder.prototype.endGroup = function () {
            if (this.openGroups <= 0) {
                arcgisRestRequest.warn("`endGroup(...)` was called without calling `startGroup(...)` first. Your query was not modified.");
                return this;
            }
            this.commit();
            this.openGroups--;
            this.q += ")";
            return this;
        };
        /**
         * Joins two sets of queries with an `AND` clause.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .match("Lakes")
         *   .in("title")
         *   .and()
         *   .match("Rivers")
         *   .in("title")
         * ```
         */
        SearchQueryBuilder.prototype.and = function () {
            return this.addModifier("and");
        };
        /**
         * Joins two sets of queries with an `OR` clause.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .match("Lakes")
         *   .in("title")
         *   .or()
         *   .match("Rivers")
         *   .in("title")
         * ```
         */
        SearchQueryBuilder.prototype.or = function () {
            return this.addModifier("or");
        };
        /**
         * Joins two sets of queries with a `NOT` clause. Another option for filtering results is the [prohibit operator '-'](https://developers.arcgis.com/rest/users-groups-and-items/search-reference.htm#ESRI_SECTION1_5C6C35DB9E4A4F4492C5B937BDA2BF67).
         *
         * ```js
         * // omit results with "Rivers" in their title
         * const query = new SearchQueryBuilder()
         *   .not()
         *   .match("Rivers")
         *   .in("title")
         *
         * // equivalent
         * const query = new SearchQueryBuilder()
         *   .match("Rivers")
         *   .in("-title")
         * ```
         */
        SearchQueryBuilder.prototype.not = function () {
            return this.addModifier("not");
        };
        /**
         * Begins a new range query.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .from(yesterdaysDate)
         *   .to(todaysDate)
         *   .in("created")
         * ```
         */
        SearchQueryBuilder.prototype.from = function (term) {
            if (this.hasTerms) {
                arcgisRestRequest.warn(
                // prettier-ignore
                "`from(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Your query was not modified.");
                return this;
            }
            this.rangeStack[0] = term;
            return this;
        };
        /**
         * Ends a range query.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .from(yesterdaysDate)
         *   .to(todaysDate)
         *   .in("created")
         * ```
         */
        SearchQueryBuilder.prototype.to = function (term) {
            if (this.hasTerms) {
                arcgisRestRequest.warn(
                // prettier-ignore
                "`to(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Your query was not modified.");
                return this;
            }
            this.rangeStack[1] = term;
            return this;
        };
        /**
         * Boosts the previous term to increase its rank in the results.
         *
         * ```js
         * const query = new SearchQueryBuilder()
         *   .match("Lakes")
         *   .in("title")
         *   .or()
         *   .match("Rivers")
         *   .in("title")
         *   .boost(3)
         * ```
         */
        SearchQueryBuilder.prototype.boost = function (num) {
            this.commit();
            this.q += "^" + num;
            return this;
        };
        /**
         * Returns the current query string. Called internally when the request is made.
         */
        SearchQueryBuilder.prototype.toParam = function () {
            this.commit();
            this.cleanup();
            return this.q;
        };
        /**
         * Returns a new instance of `SearchQueryBuilder` based on the current instance.
         */
        SearchQueryBuilder.prototype.clone = function () {
            this.commit();
            this.cleanup();
            return new SearchQueryBuilder(this.q + "");
        };
        SearchQueryBuilder.prototype.addModifier = function (modifier) {
            if (this.currentModifer) {
                arcgisRestRequest.warn(
                // prettier-ignore
                "You have called `" + this.currentModifer + "()` after `" + modifier + "()`. Your current query was not modified.");
                return this;
            }
            this.commit();
            if (this.q === "" && modifier !== "not") {
                arcgisRestRequest.warn("You have called `" + modifier + "()` without calling another method to modify your query first. Try calling `match()` first.");
                return this;
            }
            this.currentModifer = modifier;
            this.q += this.q === "" ? "" : " ";
            this.q += modifier.toUpperCase() + " ";
            return this;
        };
        SearchQueryBuilder.prototype.hasWhiteSpace = function (s) {
            return /\s/g.test(s);
        };
        SearchQueryBuilder.prototype.formatTerm = function (term) {
            if (term instanceof Date) {
                return term.getTime();
            }
            if (typeof term === "string" && this.hasWhiteSpace(term)) {
                return "\"" + term + "\"";
            }
            return term;
        };
        SearchQueryBuilder.prototype.commit = function () {
            var _this = this;
            this.currentModifer = undefined;
            if (this.hasRange) {
                this.q += "[" + this.formatTerm(this.rangeStack[0]) + " TO " + this.formatTerm(this.rangeStack[1]) + "]";
                this.rangeStack = [undefined, undefined];
            }
            if (this.hasTerms) {
                this.q += this.termStack
                    .map(function (term) {
                    return _this.formatTerm(term);
                })
                    .join(" ");
                this.termStack = [];
            }
            return this;
        };
        Object.defineProperty(SearchQueryBuilder.prototype, "hasTerms", {
            get: function () {
                return this.termStack.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchQueryBuilder.prototype, "hasRange", {
            get: function () {
                return this.rangeStack.length && this.rangeStack[0] && this.rangeStack[1];
            },
            enumerable: true,
            configurable: true
        });
        SearchQueryBuilder.prototype.cleanup = function () {
            // end a group if we have started one
            if (this.openGroups > 0) {
                arcgisRestRequest.warn(
                // prettier-ignore
                "Automatically closing " + this.openGroups + " group(s). You can use `endGroup(...)` to remove this warning.");
                while (this.openGroups > 0) {
                    this.q += ")";
                    this.openGroups--;
                }
            }
            var oldQ = this.q;
            this.q = oldQ.replace(/( AND ?| NOT ?| OR ?)*$/, "");
            if (oldQ !== this.q) {
                arcgisRestRequest.warn("`startGroup(...)` was called without calling `endGroup(...)` first. Your query was not modified.");
            }
            // clear empty groups
            this.q = this.q.replace(/(\(\))*/, "");
        };
        return SearchQueryBuilder;
    }());

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    function genericSearch(search, searchType) {
        var url;
        var options;
        if (typeof search === "string" || search instanceof SearchQueryBuilder) {
            options = {
                httpMethod: "GET",
                params: {
                    q: search
                }
            };
        }
        else {
            options = arcgisRestRequest.appendCustomParams(search, ["q", "num", "start", "sortField", "sortOrder"], {
                httpMethod: "GET"
            });
        }
        url =
            getPortalUrl(options) +
                (searchType === "item" ? "/search" : "/community/groups");
        // send the request
        return arcgisRestRequest.request(url, options).then(function (r) {
            if (r.nextStart && r.nextStart !== -1) {
                r.nextPage = function () {
                    var newOptions;
                    if (typeof search === "string" ||
                        search instanceof SearchQueryBuilder) {
                        newOptions = {
                            q: search,
                            start: r.nextStart
                        };
                    }
                    else {
                        newOptions = search;
                        newOptions.start = r.nextStart;
                    }
                    return genericSearch(newOptions, searchType);
                };
            }
            return r;
        });
    }

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { searchItems } from "@esri/arcgis-rest-portal";
     * //
     * searchItems('water')
     *   .then(response) // response.total => 355
     * ```
     * Search a portal for items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) for more information.
     *
     * @param search - A string or RequestOptions object to pass through to the endpoint.
     * @returns A Promise that will resolve with the data from the response.
     */
    function searchItems(search) {
        return genericSearch(search, "item");
    }

    /* Copyright (c) 2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    function chunk(array, size) {
        if (array.length === 0) {
            return [];
        }
        var chunks = [];
        for (var i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { addGroupUsers } from "@esri/arcgis-rest-portal";
     * //
     * addGroupUsers({
     *   id: groupId,
     *   users: ["username1", "username2"],
     *   admins: ["username3"],
     *   authentication
     * })
     * .then(response);
     * ```
     * Add users to a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm) for more information.
     *
     * @param requestOptions  - Options for the request
     * @returns A Promise
     */
    function addGroupUsers(requestOptions) {
        var id = requestOptions.id;
        var url = getPortalUrl(requestOptions) + "/community/groups/" + id + "/addUsers";
        var baseOptions = Object.assign({}, requestOptions, {
            admins: undefined,
            users: undefined
        });
        var batchRequestOptions = _prepareRequests("users", requestOptions.users, baseOptions).concat(_prepareRequests("admins", requestOptions.admins, baseOptions));
        var promises = batchRequestOptions.map(function (options) {
            return _sendSafeRequest(url, options);
        });
        return Promise.all(promises).then(_consolidateRequestResults);
    }
    function _prepareRequests(type, usernames, baseOptions) {
        if (!usernames || usernames.length < 1) {
            return [];
        }
        // the ArcGIS REST API only allows to add no more than 25 users per request,
        // see https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm
        var userChunks = chunk(usernames, 25);
        return userChunks.map(function (users) {
            return _generateRequestOptions(type, users, baseOptions);
        });
    }
    function _generateRequestOptions(type, usernames, baseOptions) {
        var _a, _b;
        return Object.assign({}, baseOptions, (_a = {},
            _a[type] = usernames,
            _a.params = __assign({}, baseOptions.params, (_b = {}, _b[type] = usernames, _b)),
            _a));
    }
    // this request is safe since the request error will be handled
    function _sendSafeRequest(url, requestOptions) {
        return arcgisRestRequest.request(url, requestOptions).catch(function (error) {
            return {
                errors: [error]
            };
        });
    }
    function _consolidateRequestResults(results) {
        var notAdded = results
            .filter(function (result) { return result.notAdded; })
            .reduce(function (collection, result) { return collection.concat(result.notAdded); }, []);
        var errors = results
            .filter(function (result) { return result.errors; })
            .reduce(function (collection, result) { return collection.concat(result.errors); }, []);
        var consolidated = { notAdded: notAdded };
        if (errors.length > 0) {
            consolidated.errors = errors;
        }
        return consolidated;
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { createGroup } from "@esri/arcgis-rest-portal";
     * //
     * createGroup({
     *   group: {
     *     title: "No Homers",
     *     access: "public"
     *   },
     *   authentication
     * })
     *   .then(response)
     * ```
     * Create a new Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-group.htm) for more information.
     *
     * Note: The group name must be unique within the user's organization.
     * @param requestOptions  - Options for the request, including a group object
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function createGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/createGroup";
        requestOptions.params = __assign({}, requestOptions.params, requestOptions.group);
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { getGroup } from "@esri/arcgis-rest-portal";
     * //
     * getGroup("fxb988") // id
     *   .then(response)
     * ```
     * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.
     *
     * @param id - Group Id
     * @param requestOptions  - Options for the request
     * @returns  A Promise that will resolve with the data from the response.
     */
    function getGroup(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + id;
        // default to a GET request
        var options = __assign({ httpMethod: "GET" }, requestOptions);
        return arcgisRestRequest.request(url, options);
    }
    /**
     * Returns the content of a Group. Since the group may contain 1000s of items
     * the requestParams allow for paging.
     * @param id - Group Id
     * @param requestOptions  - Options for the request, including paging parameters.
     * @returns  A Promise that will resolve with the content of the group.
     */
    function getGroupContent(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/content/groups/" + id;
        // default to a GET request
        var options = __assign({ httpMethod: "GET" }, { params: { start: 1, num: 100 } }, requestOptions);
        // is this the most concise way to mixin with the defaults above?
        if (requestOptions && requestOptions.paging) {
            options.params = __assign({}, requestOptions.paging);
        }
        return arcgisRestRequest.request(url, options);
    }
    /**
     * Get the usernames of the admins and members. Does not return actual 'User' objects. Those must be
     * retrieved via separate calls to the User's API.
     * @param id - Group Id
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with arrays of the group admin usernames and the member usernames
     */
    function getGroupUsers(id, requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + id + "/users";
        // default to a GET request
        var options = __assign({ httpMethod: "GET" }, requestOptions);
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { createGroupNotification } from '@esri/arcgis-rest-portal';
     * // send an email to an entire group
     * createGroupNotification({
     *   authentication: UserSession,
     *   subject: "hello",
     *   message: "world!",
     *   id: groupId
     * })
     * ```
     * Create a group notification.
     *
     * @param requestOptions - Options for the request
     *
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function createGroupNotification(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/createNotification";
        var options = __assign({ params: __assign({ subject: requestOptions.subject, message: requestOptions.message, users: requestOptions.users, notificationChannelType: requestOptions.notificationChannelType || "email", clientId: requestOptions.clientId, silentNotification: requestOptions.silentNotification, notifyAll: !requestOptions.users || requestOptions.users.length === 0 }, requestOptions.params) }, requestOptions);
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { protectGroup } from '@esri/arcgis-rest-portal';
     * //
     * protectGroup({
     *   id: groupId,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Protect a group to avoid accidental deletion. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/protect-group.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function protectGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/protect";
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { unprotectGroup } from '@esri/arcgis-rest-portal';
     * //
     * unprotectGroup({
     *   id: groupId,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Unprotect a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unprotect-group.htm) for more information.
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function unprotectGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/unprotect";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { removeGroup } from '@esri/arcgis-rest-portal';
     * //
     * removeGroup({
     *   id: groupId,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Delete a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-group.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function removeGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/delete";
        var options = __assign({}, requestOptions);
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { searchGroups } from "@esri/arcgis-rest-portal";
     * //
     * searchGroups('water')
     *   .then(response) // response.total => 355
     * ```
     * Search a portal for groups. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-search.htm) for more information.
     *
     * @param search - A string or RequestOptions object to pass through to the endpoint.
     * @returns A Promise that will resolve with the data from the response.
     */
    function searchGroups(search) {
        return genericSearch(search, "group");
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { updateGroup } from '@esri/arcgis-rest-portal';
     * //
     * updateGroup({
     *   group: { id: "fgr344", title: "new" }
     * })
     *   .then(response)
     * ```
     * Update the properties of a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-group.htm) for more information.
     *
     * @param requestOptions - Options for the request, including the group
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function updateGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.group.id + "/update";
        requestOptions.params = __assign({}, requestOptions.params, requestOptions.group);
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { joinGroup } from '@esri/arcgis-rest-portal';
     * //
     * joinGroup({
     *   id: groupId,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Make a request as the authenticated user to join a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/join-group.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request and the groupId.
     */
    function joinGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/join";
        return arcgisRestRequest.request(url, requestOptions);
    }
    /**
     * ```js
     * import { leaveGroup } from '@esri/arcgis-rest-portal';
     * //
     * leaveGroup({
     *   id: groupId,
     *   authentication
     * })
     *   .then(response)
     * ```
     * Make a request as the authenticated user to leave a Group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/leave-group.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request and the groupId.
     */
    function leaveGroup(requestOptions) {
        var url = getPortalUrl(requestOptions) + "/community/groups/" + requestOptions.id + "/leave";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { getUser } from '@esri/arcgis-rest-portal';
     * //
     * getUser("jsmith")
     *   .then(response)
     * // => { firstName: "John", lastName: "Smith",tags: ["GIS Analyst", "City of Redlands"] }
     * ```
     * Get information about a user. This method has proven so generically useful that you can also call [`UserSession.getUser()`](/arcgis-rest-js/api/auth/UserSession#getUser-summary).
     *
     * @param requestOptions - options to pass through in the request
     * @returns A Promise that will resolve with metadata about the user
     */
    function getUser(requestOptions) {
        var url;
        var options = { httpMethod: "GET" };
        // if a username is passed, assume ArcGIS Online
        if (typeof requestOptions === "string") {
            url = "https://www.arcgis.com/sharing/rest/community/users/" + requestOptions;
        }
        else {
            // if an authenticated session is passed, default to that user/portal unless another username is provided manually
            var username = requestOptions.username || requestOptions.authentication.username;
            url = getPortalUrl(requestOptions) + "/community/users/" + encodeURIComponent(username);
            options = __assign({}, requestOptions, options);
        }
        // send the request
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Helper that returns the [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm) for a given portal.
     *
     * @param session
     * @returns User url to be used in API requests.
     */
    function getUserUrl(session) {
        return getPortalUrl(session) + "/community/users/" + encodeURIComponent(session.username);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { getUserInvitations } from '@esri/arcgis-rest-portal';
     * // username is inferred from UserSession
     * getUserInvitations({ authentication })
     *   .then(response) // response.userInvitations.length => 3
     * ```
     * Get all invitations for a user. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitations.htm) for more information.
     *
     * @param requestOptions - options to pass through in the request
     * @returns A Promise that will resolve with the user's invitations
     */
    function getUserInvitations(requestOptions) {
        var options = { httpMethod: "GET" };
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/invitations";
        options = __assign({}, requestOptions, options);
        // send the request
        return arcgisRestRequest.request(url, options);
    }
    /**
     * ```js
     * import { getUserInvitation } from '@esri/arcgis-rest-portal';
     * // username is inferred from UserSession
     * getUserInvitation({
     *   invitationId: "3ef",
     *   authentication
     * })
     *   .then(response) // => response.accepted => true
     * ```
     * Get an invitation for a user by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitation.htm) for more information.
     *
     * @param requestOptions - options to pass through in the request
     * @returns A Promise that will resolve with the invitation
     */
    function getUserInvitation(requestOptions) {
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/invitations/" + requestOptions.invitationId;
        var options = { httpMethod: "GET" };
        options = __assign({}, requestOptions, options);
        // send the request
        return arcgisRestRequest.request(url, options);
    }
    /**
     * ```js
     * import { acceptInvitation } from '@esri/arcgis-rest-portal';
     * // username is inferred from UserSession
     * acceptInvitation({
     *   invitationId: "3ef",
     *   authentication
     * })
     *   .then(response)
     * ```
     * Accept an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/accept-invitation.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function acceptInvitation(requestOptions) {
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/invitations/" + requestOptions.invitationId + "/accept";
        var options = __assign({}, requestOptions);
        return arcgisRestRequest.request(url, options);
    }
    /**
     * ```js
     * import { declineInvitation } from '@esri/arcgis-rest-portal';
     * // username is inferred from UserSession
     * declineInvitation({
     *   invitationId: "3ef",
     *   authentication
     * })
     *   .then(response)
     * ```
     * Decline an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/decline-invitation.htm) for more information.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function declineInvitation(requestOptions) {
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/invitations/" + requestOptions.invitationId + "/decline";
        var options = __assign({}, requestOptions);
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { getUserNotifications } from '@esri/arcgis-rest-portal';
     * // username is inferred from UserSession
     * getUserNotifications({ authentication })
     *   .then(results) // results.notifications.length) => 3
     * ```
     * Get notifications for a user.
     *
     * @param requestOptions - options to pass through in the request
     * @returns A Promise that will resolve with the user's notifications
     */
    function getUserNotifications(requestOptions) {
        var options = { httpMethod: "GET" };
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/notifications";
        options = __assign({}, requestOptions, options);
        // send the request
        return arcgisRestRequest.request(url, options);
    }
    /**
     * Delete a notification.
     *
     * @param requestOptions - Options for the request
     * @returns A Promise that will resolve with the success/failure status of the request
     */
    function removeNotification(requestOptions) {
        var username = encodeURIComponent(requestOptions.authentication.username);
        var portalUrl = getPortalUrl(requestOptions);
        var url = portalUrl + "/community/users/" + username + "/notifications/" + requestOptions.id + "/delete";
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { updateUser } from '@esri/arcgis-rest-portal';
     * // any user can update their own profile
     * updateUser({
     *   authentication,
     *   user: { description: "better than the last one" }
     * })
     *   .then(response)
     * // org administrators must declare the username that will be updated explicitly
     * updateUser({
     *   authentication,
     *   user: { username: "c@sey", description: "" }
     * })
     *   .then(response)
     * // => { "success": true, "username": "c@sey" }
     * ```
     * Update a user profile. The username will be extracted from the authentication session unless it is provided explicitly. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-user.htm) for more information.
     *
     * @param requestOptions - options to pass through in the request
     * @returns A Promise that will resolve with metadata about the user
     */
    function updateUser(requestOptions) {
        // default to the authenticated username unless another username is provided manually
        var username = requestOptions.user.username || requestOptions.authentication.username;
        var updateUrl = getPortalUrl(requestOptions) + "/community/users/" + encodeURIComponent(username) + "/update";
        // mixin custom params and the user information, then drop the user info
        requestOptions.params = __assign({}, requestOptions.user, requestOptions.params);
        delete requestOptions.user;
        // send the request
        return arcgisRestRequest.request(updateUrl, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    function getSharingUrl(requestOptions) {
        var username = requestOptions.authentication.username;
        var owner = requestOptions.owner || username;
        return getPortalUrl(requestOptions) + "/content/users/" + encodeURIComponent(owner) + "/items/" + requestOptions.id + "/share";
    }
    function isItemOwner(requestOptions) {
        var username = requestOptions.authentication.username;
        var owner = requestOptions.owner || username;
        return owner === username;
    }
    /**
     * Check it the user is a full org_admin
     * @param requestOptions
     * @returns Promise resolving in a boolean indicating if the user is an ArcGIS Organization administrator
     */
    function isOrgAdmin(requestOptions) {
        var session = requestOptions.authentication;
        return session.getUser(requestOptions).then(function (user) {
            if (!user || user.role !== "org_admin") {
                return false;
            }
            else {
                return true;
            }
        });
    }
    /**
     * Get the User Membership for a particular group. Use this if all you have is the groupId.
     * If you have the group object, check the `userMembership.memberType` property instead of calling this method.
     *
     * @param requestOptions
     * @returns A Promise that resolves with "owner" | "admin" | "member" | "nonmember"
     */
    function getUserMembership(requestOptions) {
        // fetch the group...
        return getGroup(requestOptions.groupId, requestOptions)
            .then(function (group) {
            return group.userMembership.memberType;
        })
            .catch(function () {
            return "nonmember";
        });
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { setItemAccess } from "@esri/arcgis-rest-portal";
     * //
     * setItemAccess({
     *   id: "abc123",
     *   access: "public", // 'org' || 'private'
     *   authentication: session
     * })
     * ```
     * Change who is able to access an item.
     *
     * @param requestOptions - Options for the request.
     * @returns A Promise that will resolve with the data from the response.
     */
    function setItemAccess(requestOptions) {
        var url = getSharingUrl(requestOptions);
        if (isItemOwner(requestOptions)) {
            // if the user owns the item, proceed
            return updateItemAccess(url, requestOptions);
        }
        else {
            // otherwise we need to check to see if they are an organization admin
            return isOrgAdmin(requestOptions).then(function (admin) {
                if (admin) {
                    return updateItemAccess(url, requestOptions);
                }
                else {
                    // if neither, updating the sharing isnt possible
                    throw Error("This item can not be shared by " + requestOptions.authentication.username + ". They are neither the item owner nor an organization admin.");
                }
            });
        }
    }
    function updateItemAccess(url, requestOptions) {
        requestOptions.params = __assign({ org: false, everyone: false }, requestOptions.params);
        // if the user wants to make the item private, it needs to be unshared from any/all groups as well
        if (requestOptions.access === "private") {
            requestOptions.params.groups = " ";
        }
        if (requestOptions.access === "org") {
            requestOptions.params.org = true;
        }
        // if sharing with everyone, share with the entire organization as well.
        if (requestOptions.access === "public") {
            requestOptions.params.org = true;
            requestOptions.params.everyone = true;
        }
        return arcgisRestRequest.request(url, requestOptions);
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';
     * //
     * shareItemWithGroup({
     *   id: "abc123",
     *   groupId: "xyz987",
     *   authentication
     * })
     * ```
     * Share an item with a group, either as an
     * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm),
     * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or
     * organization admin.
     *
     * @param requestOptions - Options for the request.
     * @returns A Promise that will resolve with the data from the response.
     */
    function shareItemWithGroup(requestOptions) {
        return changeGroupSharing(__assign({ action: "share" }, requestOptions));
    }
    /**
     * Stop sharing an item with a group, either as an
     * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-item-owner-.htm),
     * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-group-admin-.htm) or
     * organization admin.
     *
     * ```js
     * import { unshareItemWithGroup } from '@esri/arcgis-rest-portal';
     *
     * unshareItemWithGroup({
     *   id: "abc123",
     *   groupId: "xyz987",
     *   authentication: session
     * })
     * ```
     *
     * @param requestOptions - Options for the request.
     * @returns A Promise that will resolve with the data from the response.
     */
    function unshareItemWithGroup(requestOptions) {
        return changeGroupSharing(__assign({ action: "unshare" }, requestOptions));
    }
    /**
     * @param requestOptions - Options for the request.
     * @returns A Promise that will resolve with the data from the response.
     */
    function changeGroupSharing(requestOptions) {
        var username = requestOptions.authentication.username;
        var owner = requestOptions.owner || username;
        return isOrgAdmin(requestOptions).then(function (admin) {
            var resultProp = requestOptions.action === "share" ? "notSharedWith" : "notUnsharedFrom";
            // check if the item has already been shared with the group...
            return isItemSharedWithGroup(requestOptions).then(function (result) {
                // if we are sharing and result is true OR we are unsharing and result is false... short circuit
                if ((requestOptions.action === "share" && result === true) ||
                    (requestOptions.action === "unshare" && result === false)) {
                    // and send back the same response ArcGIS Online would
                    var response = {
                        itemId: requestOptions.id,
                        shortcut: true
                    };
                    response[resultProp] = [];
                    return response;
                }
                else {
                    // next check to ensure the user is a member of the group
                    return getUserMembership(requestOptions)
                        .then(function (membership) {
                        if (membership === "nonmember") {
                            // abort and reject promise
                            throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are not a member of the specified group " + requestOptions.groupId + ".");
                        }
                        else {
                            // if owner (and member of group) share using the owner url
                            if (owner === username) {
                                return getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/" + requestOptions.action;
                            }
                            else {
                                // if org admin, group admin/owner, use the bare item url
                                if (membership === "admin" || membership === "owner" || admin) {
                                    return getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/" + requestOptions.action;
                                }
                                else {
                                    // otherwise abort
                                    throw Error("This item can not be " + requestOptions.action + "d by " + username + " as they are neither the owner, a groupAdmin of " + requestOptions.groupId + ", nor an org_admin.");
                                }
                            }
                        }
                    })
                        .then(function (url) {
                        // now its finally time to do the sharing
                        requestOptions.params = {
                            groups: requestOptions.groupId,
                            confirmItemControl: requestOptions.confirmItemControl
                        };
                        // dont mixin to ensure that old query parameters from the search request arent included
                        return arcgisRestRequest.request(url, requestOptions);
                    })
                        .then(function (sharingResponse) {
                        if (sharingResponse[resultProp].length) {
                            throw Error("Item " + requestOptions.id + " could not be " + requestOptions.action + "d to group " + requestOptions.groupId + ".");
                        }
                        else {
                            // all is well
                            return sharingResponse;
                        }
                    });
                } // else
            }); // then
        });
    }
    /**
     * Find out whether or not an item is already shared with a group.
     *
     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.
     * @returns A Promise that will resolve with the data from the response.
     */
    function isItemSharedWithGroup(requestOptions) {
        var query = {
            q: "id: " + requestOptions.id + " AND group: " + requestOptions.groupId,
            start: 1,
            num: 10,
            sortField: "title"
        };
        // we need to append some params into requestOptions, so make a clone
        // instead of mutating the params on the inbound requestOptions object
        var options = __assign({}, requestOptions, { rawResponse: false });
        // instead of calling out to "@esri/arcgis-rest-items, make the request manually to forgoe another dependency
        options.params = __assign({}, query, requestOptions.params);
        var url = getPortalUrl(options) + "/search";
        // to do: just call searchItems now that its in the same package
        return arcgisRestRequest.request(url, options).then(function (searchResponse) {
            // if there are no search results at all, we know the item hasnt already been shared with the group
            if (searchResponse.total === 0) {
                return false;
            }
            else {
                var sharedItem_1;
                // otherwise loop through and search for the id
                searchResponse.results.some(function (item) {
                    var matchedItem = item.id === requestOptions.id;
                    if (matchedItem) {
                        sharedItem_1 = item;
                    }
                    return matchedItem;
                });
                if (sharedItem_1) {
                    return true;
                }
                else {
                    return false;
                }
            }
        });
    }

    /* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Get the portal
     * @param requestOptions
     */
    function getSelf(requestOptions) {
        // just delegate to getPortal w/o an id
        return getPortal(null, requestOptions);
    }
    /**
     * ```js
     * import { getPortal } from "@esri/arcgis-rest-request";
     * //
     * getPortal()
     * getPortal("fe8")
     * getPortal(null, { portal: "https://custom.maps.arcgis.com/sharing/rest/" })
     * ```
     * Fetch information about the current portal by id. If no id is passed, portals/self will be called
     * @param id
     * @param requestOptions
     */
    function getPortal(id, requestOptions) {
        // construct the search url
        var idOrSelf = id ? id : "self";
        var url = getPortalUrl(requestOptions) + "/portals/" + idOrSelf;
        // default to a GET request
        var options = __assign({ httpMethod: "GET" }, requestOptions);
        // send the request
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */

    exports.SearchQueryBuilder = SearchQueryBuilder;
    exports.acceptInvitation = acceptInvitation;
    exports.addGroupUsers = addGroupUsers;
    exports.addItemData = addItemData;
    exports.addItemRelationship = addItemRelationship;
    exports.addItemResource = addItemResource;
    exports.createFolder = createFolder;
    exports.createGroup = createGroup;
    exports.createGroupNotification = createGroupNotification;
    exports.createItem = createItem;
    exports.createItemInFolder = createItemInFolder;
    exports.declineInvitation = declineInvitation;
    exports.determineOwner = determineOwner;
    exports.getGroup = getGroup;
    exports.getGroupContent = getGroupContent;
    exports.getGroupUsers = getGroupUsers;
    exports.getItem = getItem;
    exports.getItemData = getItemData;
    exports.getItemGroups = getItemGroups;
    exports.getItemResources = getItemResources;
    exports.getPortal = getPortal;
    exports.getPortalUrl = getPortalUrl;
    exports.getRelatedItems = getRelatedItems;
    exports.getSelf = getSelf;
    exports.getSharingUrl = getSharingUrl;
    exports.getUser = getUser;
    exports.getUserInvitation = getUserInvitation;
    exports.getUserInvitations = getUserInvitations;
    exports.getUserMembership = getUserMembership;
    exports.getUserNotifications = getUserNotifications;
    exports.getUserUrl = getUserUrl;
    exports.isItemOwner = isItemOwner;
    exports.isOrgAdmin = isOrgAdmin;
    exports.joinGroup = joinGroup;
    exports.leaveGroup = leaveGroup;
    exports.moveItem = moveItem;
    exports.protectGroup = protectGroup;
    exports.protectItem = protectItem;
    exports.removeFolder = removeFolder;
    exports.removeGroup = removeGroup;
    exports.removeItem = removeItem;
    exports.removeItemRelationship = removeItemRelationship;
    exports.removeItemResource = removeItemResource;
    exports.removeNotification = removeNotification;
    exports.searchGroups = searchGroups;
    exports.searchItems = searchItems;
    exports.serializeItem = serializeItem;
    exports.setItemAccess = setItemAccess;
    exports.shareItemWithGroup = shareItemWithGroup;
    exports.unprotectGroup = unprotectGroup;
    exports.unprotectItem = unprotectItem;
    exports.unshareItemWithGroup = unshareItemWithGroup;
    exports.updateGroup = updateGroup;
    exports.updateItem = updateItem;
    exports.updateItemResource = updateItemResource;
    exports.updateUser = updateUser;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=portal.umd.js.map
